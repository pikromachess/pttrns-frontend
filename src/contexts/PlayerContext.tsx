import { 
  createContext, 
  useContext, 
  useState, 
  useRef, 
  useEffect, 
  useCallback  
} from 'react';

import type { PlayerContextType, PlayerProviderProps } from '../types/player';
import type { NFT } from '../types/nft';
import { backendApi } from '../backend-api';

const PlayerContext = createContext<PlayerContextType | undefined>(undefined);

// –ö–µ—à –¥–ª—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º—É–∑—ã–∫–∏ (–∫–ª—é—á: sessionId + nftAddress/index)
const musicCache = new Map<string, string>();

// –¢—Ä–µ–∫–µ—Ä –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
const listenTracker = new Map<string, number>();

// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏—é
const recordListenWithSession = async (nft: NFT, sessionId: string) => {
  if (!nft.address || !nft.collection?.address) {
    console.warn('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è:', {
      hasAddress: !!nft.address,
      hasCollectionAddress: !!nft.collection?.address
    });
    return false;
  }

  const now = Date.now();
  const lastRecorded = listenTracker.get(nft.address);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏ –ø—Ä–æ—à–ª–æ –º–∏–Ω–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥
  if (lastRecorded && (now - lastRecorded) < 30000) {
    console.log('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å - —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è');
    return false;
  }

  try {
    console.log('üìä –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–ø–∏—Å—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏—é:', {
      nftAddress: nft.address,
      timestamp: now,
      sessionId: sessionId.slice(0, 20) + '...'
    });

    listenTracker.set(nft.address, now);
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –∏–∑ baseUrl
    const response = await fetch(`${backendApi.baseUrl || process.env.BACKEND_URL || 'https://pttrns-backend-ts.vercel.app'}/api/session-listens`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${sessionId}`
      },
      body: JSON.stringify({
        nftAddress: nft.address,
        timestamp: now
      })
    });

    if (!response.ok) {
      listenTracker.delete(nft.address);
      
      if (response.status === 401) {
        console.error('‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è');
        return false;
      } else if (response.status === 429) {
        console.warn('‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è');
        return false;
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è:', response.status, await response.text());
        return false;
      }
    }

    const result = await response.json();
    console.log('‚úÖ –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏—é:', result);
    return true;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏—é:', error);
    listenTracker.delete(nft.address);
    return false;
  }
};

// –ù–û–í–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏ —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏—é (–∑–∞–º–µ–Ω—è–µ—Ç generateMusicWithToken)
const generateMusicWithSession = async (nft: NFT, sessionId: string, musicServerUrl: string): Promise<string> => {
  try {
    console.log('üéµ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º—É–∑—ã–∫–∏ —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏—é:', {
      nftName: nft.metadata?.name,
      sessionId: sessionId.slice(0, 20) + '...',
      musicServerUrl
    });
    
    const response = await fetch(`${musicServerUrl}/generate-music-stream`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${sessionId}`,
      },
      body: JSON.stringify({
        metadata: nft.metadata,
        index: nft.index,
        address: nft.address
      })
    });

    if (!response.ok) {
      if (response.status === 401) {
        throw new Error('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞');
      } else if (response.status === 403) {
        throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏');
      } else if (response.status === 429) {
        throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤');
      } else if (response.status === 503) {
        throw new Error('–°–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      }
      throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`);
    }

    const audioBlob = await response.blob();
    console.log('‚úÖ –ú—É–∑—ã–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    return URL.createObjectURL(audioBlob);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏:', error);
    throw error;
  }
};

export function PlayerProvider({ children }: PlayerProviderProps) {
  const [currentNft, setCurrentNft] = useState<NFT | null>(null);
  const [isPlaying, setIsPlaying] = useState(false);
  const [isPlayerVisible, setIsPlayerVisible] = useState(false);
  const [progress, setProgress] = useState(0);
  const [duration, setDuration] = useState(180);
  const [currentTime, setCurrentTime] = useState(0);
  const [volume, setVolume] = useState(0.8);
  const [isMuted, setIsMuted] = useState(false);
  const [previousVolume, setPreviousVolume] = useState(0.8);
  const [playlist, setPlaylist] = useState<NFT[]>([]);
  const [currentTrackIndex, setCurrentTrackIndex] = useState(-1);
  const [isLoadingTrack, setIsLoadingTrack] = useState(false);
  const audioRef = useRef<HTMLAudioElement>(null);
  const intervalRef = useRef<NodeJS.Timeout | null>(null);  
  const isMountedRef = useRef(true);
  const playNextTrackRef = useRef<(() => Promise<void>) | null>(null);
  const listenRecordedRef = useRef(false);
  const actualPlaytimeRef = useRef(0);
  const lastUpdateTimeRef = useRef(0);

  // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
  const recordListen = useCallback(async (nft: NFT) => {
    console.log('üéØ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è:', {
      nftName: nft.metadata?.name,
      nftAddress: nft.address,
      hasCollectionAddress: !!nft.collection?.address,
      hasSessionId: !!nft.sessionId,
      actualPlaytime: actualPlaytimeRef.current
    });
    
    if (!nft.address || !nft.collection?.address) {
      console.warn('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è:', {
        hasAddress: !!nft.address,
        hasCollectionAddress: !!nft.collection?.address
      });
      return;
    }

    const now = Date.now();
    const lastRecorded = listenTracker.get(nft.address);
    
    if (lastRecorded && (now - lastRecorded) < 30000) {
      console.log('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å - —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è');
      return;
    }

    try {
      let success = false;
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Å—Å–∏–æ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å –µ—Å–ª–∏ –µ—Å—Ç—å sessionId, –∏–Ω–∞—á–µ fallback –Ω–∞ —Å—Ç–∞—Ä—É—é
      if (nft.sessionId) {
        console.log('üìä –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏—é...');
        success = await recordListenWithSession(nft, nft.sessionId);
      } else {
        console.log('üìä –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Å—Ç–∞—Ä—ã–π API...');
        // Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
        success = await backendApi.recordListen(nft.address, nft.collection.address);
        if (success) {
          listenTracker.set(nft.address, now);
        }
      }

      if (success) {
        console.log('‚úÖ –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ:', nft.metadata?.name);
      } else {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ:', nft.metadata?.name);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è:', error);
      listenTracker.delete(nft.address);
    }
  }, []);

  // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  useEffect(() => {
    if (audioRef.current) {
      audioRef.current.volume = isMuted ? 0 : volume;
    }
  }, [volume, isMuted]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏
  const changeVolume = useCallback((newVolume: number) => {
    const clampedVolume = Math.max(0, Math.min(1, newVolume));
    setVolume(clampedVolume);
    if (clampedVolume > 0 && isMuted) {
      setIsMuted(false);
    }
    if (audioRef.current) {
      audioRef.current.volume = clampedVolume;
    }
  }, [isMuted]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –±–µ–∑ –∑–≤—É–∫–∞
  const toggleMute = useCallback(() => {
    if (isMuted) {
      setIsMuted(false);
      setVolume(previousVolume);
      if (audioRef.current) {
        audioRef.current.volume = previousVolume;
      }
    } else {
      setPreviousVolume(volume);
      setIsMuted(true);
      if (audioRef.current) {
        audioRef.current.volume = 0;
      }
    }
  }, [isMuted, volume, previousVolume]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–∞
  const updatePlaylist = useCallback((nfts: NFT[]) => {    
    setPlaylist(nfts);
    
    if (currentNft) {
      const newIndex = nfts.findIndex(nft => 
        nft.address === currentNft.address || nft.index === currentNft.index
      );
      if (newIndex !== -1) {
        setCurrentTrackIndex(newIndex);
      }
    }
  }, [currentNft]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–µ—à-–∫–ª—é—á–∞ NFT (–û–ë–ù–û–í–õ–ï–ù–ê –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Å—Å–∏—è–º–∏)
  const getNftCacheKey = useCallback((nft: NFT, sessionId?: string): string => {
    const baseKey = nft.address || `index-${nft.index}`;
    return sessionId ? `${sessionId}-${baseKey}` : baseKey;
  }, []);

  // –ù–û–í–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç—Ä–µ–∫–∞ —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏—é
  const preloadNextTrack = useCallback(async (index: number) => {
    if (playlist.length === 0) return;
    
    const nextIndex = (index + 1) % playlist.length;
    const nextNft = playlist[nextIndex];
    
    // –ò—â–µ–º —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–æ–π –∂–µ –ª–æ–≥–∏–∫–µ
    let sessionId = nextNft.sessionId;
    let musicServerUrl = nextNft.musicServerUrl;
    
    if (!sessionId || !musicServerUrl) {
      // –ü—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ NFT
      if (currentNft?.sessionId && currentNft?.musicServerUrl) {
        sessionId = currentNft.sessionId;
        musicServerUrl = currentNft.musicServerUrl;
      } else {
        // –ò—â–µ–º –ª—é–±–æ–π NFT –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ —Å —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        const nftWithSession = playlist.find(nft => nft.sessionId && nft.musicServerUrl);
        if (nftWithSession) {
          sessionId = nftWithSession.sessionId;
          musicServerUrl = nftWithSession.musicServerUrl;
        }
      }
    }
    
    if (!sessionId || !musicServerUrl) {
      console.log('‚ö†Ô∏è –ù–µ—Ç —Å–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏');
      return;
    }
    
    const cacheKey = getNftCacheKey(nextNft, sessionId);
    
    // –ï—Å–ª–∏ —Ç—Ä–µ–∫ —É–∂–µ –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞–Ω, –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ
    if (musicCache.has(cacheKey)) {      
      return;
    }
    
    try {
      console.log('üîÑ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫:', nextNft.metadata?.name);
      const audioUrl = await generateMusicWithSession(
        nextNft, 
        sessionId, 
        musicServerUrl
      );
      musicCache.set(cacheKey, audioUrl);
      console.log('‚úÖ –°–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç—Ä–µ–∫–∞:', error);
    }
  }, [playlist, currentNft, getNftCacheKey]);

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è (–û–ë–ù–û–í–õ–ï–ù–ê)
  const playNft = async (nft: NFT, nfts: NFT[] = []) => {    
    console.log('üéµ –ù–∞—á–∏–Ω–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ NFT:', {
      name: nft.metadata?.name,
      address: nft.address,
      hasSessionId: !!nft.sessionId,
      playlistLength: nfts.length
    });
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –ù–û–í–û–ì–û —Ç—Ä–µ–∫–∞
    listenRecordedRef.current = false;
    actualPlaytimeRef.current = 0;
    lastUpdateTimeRef.current = 0;
    
    // –û–±–æ–≥–∞—â–∞–µ–º NFT –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    let enrichedNft = { ...nft };
    
    if (!enrichedNft.collection?.address && nfts.length > 0) {
      const nftInPlaylist = nfts.find(n => n.address === nft.address);
      if (nftInPlaylist?.collection?.address) {
        enrichedNft.collection = nftInPlaylist.collection;
      }
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–ª–µ–π–ª–∏—Å—Ç –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    const orderedPlaylist = nfts.length > 0 ? nfts : [enrichedNft];
    const selectedIndex = orderedPlaylist.findIndex(item => 
      item.address === enrichedNft.address || 
      (item.index === enrichedNft.index && !item.address && !enrichedNft.address)
    );
    
    const startIndex = selectedIndex !== -1 ? selectedIndex : 0;   
    
    setPlaylist(orderedPlaylist);
    setCurrentTrackIndex(startIndex);
    setCurrentNft(enrichedNft);
    setIsPlayerVisible(true);
    
    setIsLoadingTrack(true);
    setIsPlaying(false);
    
    setProgress(0);
    setCurrentTime(0);
    setDuration(180);

    // –ü–æ–ª—É—á–∞–µ–º –∞—É–¥–∏–æ URL –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞
    const sessionId = enrichedNft.sessionId;
    const musicServerUrl = enrichedNft.musicServerUrl;
    
    let cacheKey: string;
    let audioUrl: string;

    if (sessionId) {
      // –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ —Å —Å–µ—Å—Å–∏—è–º–∏
      cacheKey = getNftCacheKey(enrichedNft, sessionId);
      
      if (musicCache.has(cacheKey)) {
        audioUrl = musicCache.get(cacheKey)!;
        console.log('üéµ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º—É–∑—ã–∫—É (—Å–µ—Å—Å–∏—è):', enrichedNft.metadata?.name);
      } else if (enrichedNft.audioUrl) {
        audioUrl = enrichedNft.audioUrl;
        musicCache.set(cacheKey, audioUrl);
        console.log('üéµ –î–æ–±–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π audioUrl –≤ –∫–µ—à (—Å–µ—Å—Å–∏—è):', enrichedNft.metadata?.name);
      } else {
        try {
          console.log('üéµ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –º—É–∑—ã–∫—É —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏—é:', enrichedNft.metadata?.name);
          audioUrl = await generateMusicWithSession(enrichedNft, sessionId, musicServerUrl!);
          musicCache.set(cacheKey, audioUrl);
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏ —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏—é:', error);
          setIsLoadingTrack(false);
          setIsPlaying(false);
          return;
        }
      }
    } else {
      // Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      cacheKey = getNftCacheKey(enrichedNft);
      
      if (musicCache.has(cacheKey)) {
        audioUrl = musicCache.get(cacheKey)!;
        console.log('üéµ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º—É–∑—ã–∫—É (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞):', enrichedNft.metadata?.name);
      } else if (enrichedNft.audioUrl) {
        audioUrl = enrichedNft.audioUrl;
        musicCache.set(cacheKey, audioUrl);
        console.log('üéµ –î–æ–±–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π audioUrl –≤ –∫–µ—à (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞):', enrichedNft.metadata?.name);
      } else {
        console.error('‚ùå –ù–µ—Ç —Å–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ audioUrl –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏');
        setIsLoadingTrack(false);
        setIsPlaying(false);
        return;
      }
    }

    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫
    if (audioRef.current && audioUrl) {
      try {
        await audioRef.current.pause();
        audioRef.current.currentTime = 0;
        audioRef.current.src = audioUrl;
        audioRef.current.volume = isMuted ? 0 : volume;
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∞—É–¥–∏–æ
        audioRef.current.addEventListener('loadedmetadata', () => {
          if (audioRef.current) {
            const newDuration = audioRef.current.duration || 180;
            setDuration(newDuration);            
          }
        }, { once: true });

        audioRef.current.addEventListener('canplay', () => {
          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏–Ω–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –∞—É–¥–∏–æ –≥–æ—Ç–æ–≤–æ
          if (audioRef.current && audioRef.current.paused) {
            console.log('üéµ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏–Ω–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ...');
            audioRef.current.play().catch(error => {
              console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', error);
              setIsLoadingTrack(false);
              setIsPlaying(false);
            });
          }
        }, { once: true });

        audioRef.current.addEventListener('playing', () => {          
          console.log('üéµ –ê—É–¥–∏–æ –Ω–∞—á–∞–ª–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ');
          setIsLoadingTrack(false);
          setIsPlaying(true);
          actualPlaytimeRef.current = 0;
          lastUpdateTimeRef.current = Date.now(); // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏
          startProgressTimer();
        }, { once: true });
        
        audioRef.current.addEventListener('error', () => {          
          setIsLoadingTrack(false);
          setIsPlaying(false);
        }, { once: true });

        const playPromise = audioRef.current.play();
        if (playPromise !== undefined) {
          playPromise
            .then(() => {
              console.log('‚úÖ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å —É—Å–ø–µ—à–Ω–æ');
            })
            .catch(error => {
              console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', error);
              setIsLoadingTrack(false);
              setIsPlaying(false);
            });
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', error);
        setIsLoadingTrack(false);
        setIsPlaying(false);
      }
    }

    // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫ (–ò–°–ü–†–ê–í–õ–ï–ù–û)
    if (orderedPlaylist.length > 1) {
      preloadNextTrack(startIndex);
    }
  };

  // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –∑–∞–ø–∏—Å–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π
  const startProgressTimer = useCallback(() => {
    if (intervalRef.current) {
      clearInterval(intervalRef.current);
    }
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞
    lastUpdateTimeRef.current = Date.now();
    
    intervalRef.current = setInterval(() => {
      const now = Date.now();
      
      if (!audioRef.current) {
        // Fallback –ª–æ–≥–∏–∫–∞ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        setCurrentTime(prev => {
          const newTime = prev + 1;
          
          if (isPlaying) {
            actualPlaytimeRef.current += 1;
            lastUpdateTimeRef.current = now; // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
          }
          
          const listenThreshold = Math.max(15, Math.min(30, duration * 0.5));
          
          console.log('‚è±Ô∏è –ü—Ä–æ–≥—Ä–µ—Å—Å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è (fallback):', {
            currentTime: newTime,
            duration,
            actualPlaytime: actualPlaytimeRef.current,
            listenThreshold,
            listenRecorded: listenRecordedRef.current,
            nftName: currentNft?.metadata?.name
          });
          
          if (actualPlaytimeRef.current >= listenThreshold && !listenRecordedRef.current && currentNft) {
            console.log('üéØ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ø–æ—Ä–æ–≥ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è (fallback), –∑–∞–ø–∏—Å—ã–≤–∞–µ–º...');
            const nftToRecord = { ...currentNft };
            listenRecordedRef.current = true;
            recordListen(nftToRecord);
          }
          
          if (newTime >= duration - 1) {            
            playNextTrackRef.current?.();
            return 0;
          }
          setProgress((newTime / duration) * 100);
          return newTime;
        });
        return;
      }

      const actualTime = audioRef.current.currentTime;
      const actualDuration = audioRef.current.duration || duration;
      const isPaused = audioRef.current.paused;
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É–¥–∏–æ, –∞ –Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ React
      const isReallyPlaying = !isPaused && !audioRef.current.ended;
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ React —Å —Ä–µ–∞–ª—å–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∞—É–¥–∏–æ
      if (isReallyPlaying !== isPlaying) {
        console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ isPlaying:', {
          wasPlaying: isPlaying,
          nowPlaying: isReallyPlaying,
          isPaused,
          ended: audioRef.current.ended
        });
        setIsPlaying(isReallyPlaying);
      }
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
      if (isReallyPlaying) {
        if (lastUpdateTimeRef.current > 0) {
          const deltaSeconds = (now - lastUpdateTimeRef.current) / 1000;
          // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–µ–ª—å—Ç—É —Ä–∞–∑—É–º–Ω—ã–º–∏ –ø—Ä–µ–¥–µ–ª–∞–º–∏ (–Ω–µ –±–æ–ª–µ–µ 2 —Å–µ–∫—É–Ω–¥)
          const validDelta = Math.min(Math.max(deltaSeconds, 0), 2);
          actualPlaytimeRef.current += validDelta;
        }
        lastUpdateTimeRef.current = now;
      } else {
        // –ï—Å–ª–∏ –ø–∞—É–∑–∞ –∏–ª–∏ –Ω–µ –∏–≥—Ä–∞–µ—Ç, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫ —Å—á–µ—Ç—á–∏–∫—É
        lastUpdateTimeRef.current = now;
      }
      
      const listenThreshold = Math.max(15, Math.min(30, actualDuration * 0.5));
      
      console.log('‚è±Ô∏è –ü—Ä–æ–≥—Ä–µ—Å—Å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è (—Ä–µ–∞–ª—å–Ω–æ–µ –∞—É–¥–∏–æ):', {
        actualTime: Math.round(actualTime * 100) / 100,
        actualDuration: Math.round(actualDuration * 100) / 100,
        actualPlaytime: Math.round(actualPlaytimeRef.current * 100) / 100,
        listenThreshold: Math.round(listenThreshold * 100) / 100,
        listenRecorded: listenRecordedRef.current,
        isPlaying,
        isPaused,
        isReallyPlaying,
        nftName: currentNft?.metadata?.name
      });
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–∞
      if (actualPlaytimeRef.current >= listenThreshold && !listenRecordedRef.current && currentNft) {
        console.log('üéØ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ø–æ—Ä–æ–≥ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è (—Ä–µ–∞–ª—å–Ω–æ–µ –∞—É–¥–∏–æ), –∑–∞–ø–∏—Å—ã–≤–∞–µ–º...');
        const nftToRecord = { ...currentNft };
        listenRecordedRef.current = true;
        recordListen(nftToRecord);
      }
      
      // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫ –≤ –∫–æ–Ω—Ü–µ
      if (actualTime >= actualDuration - 0.5) {
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Ü–µ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–ø–∏—Å–∞–ª–∏ –∏ –ø—Ä–æ—Å–ª—É—à–∞–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
        if (!listenRecordedRef.current && currentNft && actualPlaytimeRef.current >= Math.max(10, actualDuration * 0.3)) {
          console.log('üéØ –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Ü–µ —Ç—Ä–µ–∫–∞...');
          const nftToRecord = { ...currentNft };
          listenRecordedRef.current = true;
          recordListen(nftToRecord);
        }
        
        playNextTrackRef.current?.();
        return;
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º UI —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç—Ä–µ–∫ –Ω–µ –Ω–∞ –ø–∞—É–∑–µ
      if (!isPaused) {
        setCurrentTime(actualTime);
        setProgress((actualTime / actualDuration) * 100);
        
        if (actualDuration !== duration && !isNaN(actualDuration)) {
          setDuration(actualDuration);
        }
      }
    }, 1000);
  }, [duration, currentNft, recordListen, isPlaying]);

  const togglePlay = useCallback(() => {
    const now = Date.now();
    
    if (isPlaying) {
      setIsPlaying(false);
      if (audioRef.current) {
        audioRef.current.pause();
      }
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
      }
      // –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º lastUpdateTimeRef.current –ø—Ä–∏ –ø–∞—É–∑–µ
    } else {
      setIsPlaying(true);
      if (audioRef.current) {
        audioRef.current.play().catch(error => {
          console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', error);
          setIsPlaying(false);
        });
      }
      lastUpdateTimeRef.current = now; // –ò–°–ü–†–ê–í–õ–ï–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
      startProgressTimer();
    }
  }, [isPlaying, startProgressTimer]);

  const seekTo = useCallback((percentage: number) => {
    const newTime = (percentage / 100) * duration;   
    
    setCurrentTime(newTime);
    setProgress(percentage);
    
    if (audioRef.current) {
      audioRef.current.currentTime = newTime;
    }
    
    lastUpdateTimeRef.current = Date.now();
    
    if (isPlaying) {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
      }
      startProgressTimer();
    }
  }, [duration, isPlaying, startProgressTimer]);

  const closePlayer = () => {
    if (currentNft?.audioUrl) {
      URL.revokeObjectURL(currentNft.audioUrl);
    }

    setIsPlayerVisible(false);
    setIsPlaying(false);
    setCurrentNft(null);
    setCurrentTrackIndex(-1);
    setIsLoadingTrack(false);
    listenRecordedRef.current = false;
    actualPlaytimeRef.current = 0;
    lastUpdateTimeRef.current = 0;
    if (intervalRef.current) clearInterval(intervalRef.current);
    if (audioRef.current) {
      audioRef.current.pause();
      audioRef.current.src = '';
    }
  };

  // –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫
  const playNextTrack = async () => {
    if (playlist.length === 0) {      
      closePlayer();
      return;
    }
    
    const nextIndex = (currentTrackIndex + 1) % playlist.length;
    const nextNft = playlist[nextIndex];
    
    if (!isMountedRef.current) return;
    
    console.log('‚è≠Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫:', {
      nextIndex,
      nextNft: nextNft.metadata?.name,
      hasSessionId: !!nextNft.sessionId,
      hasMusicServerUrl: !!nextNft.musicServerUrl,
      currentNftSessionId: !!currentNft?.sessionId,
      playlistLength: playlist.length
    });
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –ù–û–í–û–ì–û —Ç—Ä–µ–∫–∞
    listenRecordedRef.current = false;
    actualPlaytimeRef.current = 0;
    lastUpdateTimeRef.current = 0;
    
    setIsLoadingTrack(true);
    setIsPlaying(false);
    
    setCurrentTrackIndex(nextIndex);
    setCurrentNft(nextNft);
    setProgress(0);
    setCurrentTime(0);
    setDuration(180);
    
    try {
      let audioUrl: string;
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ nextNft, –∑–∞—Ç–µ–º –≤ currentNft, –∑–∞—Ç–µ–º –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ
      let sessionId = nextNft.sessionId;
      let musicServerUrl = nextNft.musicServerUrl;
      
      // –ï—Å–ª–∏ —É —Å–ª–µ–¥—É—é—â–µ–≥–æ NFT –Ω–µ—Ç —Å–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∏—â–µ–º –∏—Ö –≤ –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö
      if (!sessionId || !musicServerUrl) {
        // –ü—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ NFT
        if (currentNft?.sessionId && currentNft?.musicServerUrl) {
          sessionId = currentNft.sessionId;
          musicServerUrl = currentNft.musicServerUrl;
          console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ currentNft');
        } else {
          // –ò—â–µ–º –ª—é–±–æ–π NFT –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ —Å —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
          const nftWithSession = playlist.find(nft => nft.sessionId && nft.musicServerUrl);
          if (nftWithSession) {
            sessionId = nftWithSession.sessionId;
            musicServerUrl = nftWithSession.musicServerUrl;
            console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞');
          }
        }
      }
      
      if (sessionId && musicServerUrl) {
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏');
        
        // –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ —Å —Å–µ—Å—Å–∏—è–º–∏
        const cacheKey = getNftCacheKey(nextNft, sessionId);
        
        if (musicCache.has(cacheKey)) {
          audioUrl = musicCache.get(cacheKey)!;
          console.log('üéµ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º—É–∑—ã–∫—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç—Ä–µ–∫–∞');
        } else {
          console.log('üéµ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º—É–∑—ã–∫—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç—Ä–µ–∫–∞...');
          audioUrl = await generateMusicWithSession(nextNft, sessionId, musicServerUrl);
          musicCache.set(cacheKey, audioUrl);
        }
        
        // –í–ê–ñ–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º nextNft —Å —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–π
        const updatedNextNft = {
          ...nextNft,
          sessionId,
          musicServerUrl
        };
        setCurrentNft(updatedNextNft);
        
        // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–ª–µ–π–ª–∏—Å—Ç, –µ—Å–ª–∏ —É NFT –Ω–µ –±—ã–ª–æ —Å–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (!nextNft.sessionId || !nextNft.musicServerUrl) {
          const updatedPlaylist = playlist.map((nft, index) => 
            index === nextIndex ? updatedNextNft : nft
          );
          setPlaylist(updatedPlaylist);
        }
        
      } else {
        console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∏ –≤ –æ–¥–Ω–æ–º –∏—Å—Ç–æ—á–Ω–∏–∫–µ:', {
          nextNftSessionId: !!nextNft.sessionId,
          nextNftMusicServer: !!nextNft.musicServerUrl,
          currentNftSessionId: !!currentNft?.sessionId,
          currentNftMusicServer: !!currentNft?.musicServerUrl,
          playlistWithSessions: playlist.filter(nft => nft.sessionId && nft.musicServerUrl).length
        });
        setIsLoadingTrack(false);
        setIsPlaying(false);
        return;
      }
      
      // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫
      if (audioRef.current) {
        await audioRef.current.pause();
        audioRef.current.currentTime = 0;
        audioRef.current.src = audioUrl;
        audioRef.current.volume = isMuted ? 0 : volume;
        
        audioRef.current.addEventListener('loadedmetadata', () => {
          if (audioRef.current) {
            const newDuration = audioRef.current.duration || 180;
            setDuration(newDuration);            
          }
        }, { once: true });
        
        audioRef.current.addEventListener('canplay', () => {
          if (audioRef.current && audioRef.current.paused) {
            console.log('üéµ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏–Ω–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç—Ä–µ–∫–∞...');
            audioRef.current.play().catch(error => {
              console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç—Ä–µ–∫–∞:', error);
              setIsLoadingTrack(false);
              setIsPlaying(false);
            });
          }
        }, { once: true });
        
        audioRef.current.addEventListener('playing', () => {          
          console.log('üéµ –°–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫ –Ω–∞—á–∞–ª –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ');
          setIsLoadingTrack(false);
          setIsPlaying(true);
          actualPlaytimeRef.current = 0;
          lastUpdateTimeRef.current = Date.now(); // –ò–°–ü–†–ê–í–õ–ï–ù–û
          startProgressTimer();
        }, { once: true });
        
        audioRef.current.addEventListener('error', () => {          
          setIsLoadingTrack(false);
          setIsPlaying(false);
        }, { once: true });
        
        const playPromise = audioRef.current.play();
        if (playPromise !== undefined) {
          playPromise
            .then(() => {
              console.log('‚úÖ –°–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫ –Ω–∞—á–∞–ª –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ');
            })
            .catch(error => {
              console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç—Ä–µ–∫–∞:', error);
              setIsLoadingTrack(false);
              setIsPlaying(false);
            });
        }
      }
      
      // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫
      if (playlist.length > 1) {
        preloadNextTrack(nextIndex);
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç—Ä–µ–∫–∞:', error);
      setIsLoadingTrack(false);
      setIsPlaying(false);
      
      if (playlist.length > 1) {
        const skipIndex = (nextIndex + 1) % playlist.length;
        if (skipIndex !== currentTrackIndex) {          
          await playNextTrack();
        } else {
          closePlayer();
        }
      } else {
        closePlayer();
      }
    }
  };

  useEffect(() => {
    playNextTrackRef.current = playNextTrack;
  }, [playNextTrack]);

  // –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç—Ä–µ–∫
  const playPreviousTrack = async () => {
    if (playlist.length === 0) {      
      closePlayer();
      return;
    }
    
    const prevIndex = (currentTrackIndex - 1 + playlist.length) % playlist.length;
    const prevNft = playlist[prevIndex];

    if (!isMountedRef.current) return;
    
    console.log('‚èÆÔ∏è –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç—Ä–µ–∫:', {
      prevIndex,
      prevNft: prevNft.metadata?.name,
      hasSessionId: !!prevNft.sessionId,
      hasMusicServerUrl: !!prevNft.musicServerUrl,
      currentNftSessionId: !!currentNft?.sessionId,
      playlistLength: playlist.length
    });
    
    listenRecordedRef.current = false;
    actualPlaytimeRef.current = 0;
    lastUpdateTimeRef.current = 0;
    
    setIsLoadingTrack(true);
    setIsPlaying(false);
    
    setCurrentTrackIndex(prevIndex);
    setCurrentNft(prevNft);
    setProgress(0);
    setCurrentTime(0);
    setDuration(180);
    
    try {
      let audioUrl: string;
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ê–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      let sessionId = prevNft.sessionId;
      let musicServerUrl = prevNft.musicServerUrl;
      
      // –ï—Å–ª–∏ —É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ NFT –Ω–µ—Ç —Å–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∏—â–µ–º –∏—Ö –≤ –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö
      if (!sessionId || !musicServerUrl) {
        // –ü—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ NFT
        if (currentNft?.sessionId && currentNft?.musicServerUrl) {
          sessionId = currentNft.sessionId;
          musicServerUrl = currentNft.musicServerUrl;
          console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ currentNft –¥–ª—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞');
        } else {
          // –ò—â–µ–º –ª—é–±–æ–π NFT –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ —Å —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
          const nftWithSession = playlist.find(nft => nft.sessionId && nft.musicServerUrl);
          if (nftWithSession) {
            sessionId = nftWithSession.sessionId;
            musicServerUrl = nftWithSession.musicServerUrl;
            console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –¥–ª—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞');
          }
        }
      }
      
      if (sessionId && musicServerUrl) {
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏ (–ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç—Ä–µ–∫)');
        
        const cacheKey = getNftCacheKey(prevNft, sessionId);
        
        if (musicCache.has(cacheKey)) {
          audioUrl = musicCache.get(cacheKey)!;
          console.log('üéµ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º—É–∑—ã–∫—É –¥–ª—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞');
        } else {
          console.log('üéµ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º—É–∑—ã–∫—É –¥–ª—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞...');
          audioUrl = await generateMusicWithSession(prevNft, sessionId, musicServerUrl);
          musicCache.set(cacheKey, audioUrl);
        }
        
        // –í–ê–ñ–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º prevNft —Å —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        const updatedPrevNft = {
          ...prevNft,
          sessionId,
          musicServerUrl
        };
        setCurrentNft(updatedPrevNft);
        
        // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–ª–µ–π–ª–∏—Å—Ç, –µ—Å–ª–∏ —É NFT –Ω–µ –±—ã–ª–æ —Å–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (!prevNft.sessionId || !prevNft.musicServerUrl) {
          const updatedPlaylist = playlist.map((nft, index) => 
            index === prevIndex ? updatedPrevNft : nft
          );
          setPlaylist(updatedPlaylist);
        }
        
      } else {
        console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞:', {
          prevNftSessionId: !!prevNft.sessionId,
          prevNftMusicServer: !!prevNft.musicServerUrl,
          currentNftSessionId: !!currentNft?.sessionId,
          currentNftMusicServer: !!currentNft?.musicServerUrl,
          playlistWithSessions: playlist.filter(nft => nft.sessionId && nft.musicServerUrl).length
        });
        setIsLoadingTrack(false);
        setIsPlaying(false);
        return;
      }
      
      // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç—Ä–µ–∫
      if (audioRef.current) {
        await audioRef.current.pause();
        audioRef.current.currentTime = 0;
        audioRef.current.src = audioUrl;
        audioRef.current.volume = isMuted ? 0 : volume;
        
        audioRef.current.addEventListener('loadedmetadata', () => {
          if (audioRef.current) {
            setDuration(audioRef.current.duration || 180);
          }
        }, { once: true });
        
        audioRef.current.addEventListener('canplay', () => {
          if (audioRef.current && audioRef.current.paused) {
            console.log('üéµ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏–Ω–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞...');
            audioRef.current.play().catch(error => {
              console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞:', error);
              setIsLoadingTrack(false);
              setIsPlaying(false);
            });
          }
        }, { once: true });
        
        audioRef.current.addEventListener('playing', () => {         
          console.log('üéµ –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ç—Ä–µ–∫ –Ω–∞—á–∞–ª –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ');
          setIsLoadingTrack(false);
          setIsPlaying(true);
          actualPlaytimeRef.current = 0;
          lastUpdateTimeRef.current = Date.now(); // –ò–°–ü–†–ê–í–õ–ï–ù–û
          startProgressTimer();
        }, { once: true });
        
        audioRef.current.addEventListener('error', () => {          
          setIsLoadingTrack(false);
          setIsPlaying(false);
        }, { once: true });
        
        const playPromise = audioRef.current.play();
        if (playPromise !== undefined) {
          playPromise
            .then(() => {
              console.log('‚úÖ –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ç—Ä–µ–∫ –Ω–∞—á–∞–ª –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ');
            })
            .catch(error => {
              console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞:', error);
              setIsLoadingTrack(false);
              setIsPlaying(false);
            });
        }
      }
      
      if (playlist.length > 1) {
        preloadNextTrack(prevIndex);
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞:', error);
      setIsLoadingTrack(false);
      setIsPlaying(false);
      
      if (playlist.length > 1) {
        const skipIndex = (prevIndex - 1 + playlist.length) % playlist.length;
        if (skipIndex !== currentTrackIndex) {          
          await playPreviousTrack();
        } else {
          closePlayer();
        }
      } else {
        closePlayer();
      }
    }
  };

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    isMountedRef.current = true;
    return () => {
      isMountedRef.current = false;
      if (intervalRef.current) clearInterval(intervalRef.current);
      if (audioRef.current) {
        audioRef.current.pause();
        audioRef.current.src = '';
      }
      // –û—á–∏—â–∞–µ–º –∫–µ—à –º—É–∑—ã–∫–∏ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
      musicCache.clear();
      // –û—á–∏—â–∞–µ–º —Ç—Ä–µ–∫–µ—Ä –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π
      listenTracker.clear();
    };
  }, []);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç–∞
  useEffect(() => {
    const audio = audioRef.current;
    if (!audio) return;

    const handleEnded = () => {      
      playNextTrack();
    };

    const handleError = (e: Event) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ:', e);
      setIsPlaying(false);
      setIsLoadingTrack(false);
      // –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      if (playlist.length > 1) {
        setTimeout(() => playNextTrack(), 1000);
      }
    };

    const handleLoadStart = () => {
      console.log('‚è≥ –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ');
    };

    const handleCanPlay = () => {
      console.log('‚úÖ –ê—É–¥–∏–æ –≥–æ—Ç–æ–≤–æ –∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—é');
    };

    const handleLoadedMetadata = () => {      
      if (audio.duration && !isNaN(audio.duration)) {
        setDuration(audio.duration);
      }
    };

    audio.addEventListener('ended', handleEnded);
    audio.addEventListener('error', handleError);
    audio.addEventListener('loadstart', handleLoadStart);
    audio.addEventListener('canplay', handleCanPlay);
    audio.addEventListener('loadedmetadata', handleLoadedMetadata);

    return () => {
      audio.removeEventListener('ended', handleEnded);
      audio.removeEventListener('error', handleError);
      audio.removeEventListener('loadstart', handleLoadStart);
      audio.removeEventListener('canplay', handleCanPlay);
      audio.removeEventListener('loadedmetadata', handleLoadedMetadata);
    };
  }, [currentTrackIndex, playlist, playNextTrack]);

  const value: PlayerContextType = {
    currentNft,
    isPlaying,
    isPlayerVisible,
    progress,
    duration,
    currentTime,
    volume,
    isMuted,
    playlist,
    isLoadingTrack,
    updatePlaylist,
    playNft,
    togglePlay,
    seekTo,
    closePlayer,
    playNextTrack,
    playPreviousTrack,
    changeVolume,
    toggleMute
  };

  return (
    <PlayerContext.Provider value={value}>
      <audio 
        ref={audioRef} 
        preload="metadata"
        crossOrigin="anonymous"
      />
      {children}
    </PlayerContext.Provider>
  );
}

export const usePlayer = (): PlayerContextType => {
  const context = useContext(PlayerContext);
  if (!context) {
    throw new Error('usePlayer must be used within PlayerProvider');
  }
  return context;
};