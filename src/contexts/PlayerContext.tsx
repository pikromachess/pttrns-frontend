// src/contexts/PlayerContext.refactored.tsx
import { 
  createContext, 
  useContext, 
  useState, 
  useEffect, 
  useCallback,
  useRef  
} from 'react';

import type { PlayerContextType, PlayerProviderProps } from '../types/player';
import type { NFT } from '../types/nft';
import { BackendTokenContext } from '../BackendTokenContext';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –Ω–æ–≤—ã–µ —Ö—É–∫–∏
import { useAudioPlayer } from '../hooks/useAudioPlayer';
import { useMusicCache } from '../hooks/useMusicCache';
import { useListenTracker } from '../hooks/useListenTracker';
import { useMusicApiKey } from '../hooks/useMusicApiKey';
import { usePlaylistManager } from '../hooks/usePlaylistManager';
import { useProgressTimer } from '../hooks/useProgressTimer';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
import { musicGenerationService } from '../services/musicGenerationService';
import { listenRecordService } from '../services/listenRecordService';

const PlayerContext = createContext<PlayerContextType | undefined>(undefined);

export function PlayerProvider({ children }: PlayerProviderProps) {
  // –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–µ–µ—Ä–∞
  const [isPlayerVisible, setIsPlayerVisible] = useState(false);
  const [isLoadingTrack, setIsLoadingTrack] = useState(false);
  
  // –ö–æ–Ω—Ç–µ–∫—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const { token } = useContext(BackendTokenContext);
  
  // Ref –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const isMountedRef = useRef(true);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—É–∫–∏
  const musicCache = useMusicCache({ maxSize: 50, maxAge: 30 * 60 * 1000 });
  const listenTracker = useListenTracker();
  const musicApiKey = useMusicApiKey();

  // –•—É–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–æ–º
  const playlistManager = usePlaylistManager({
    onTrackChange: (nft, index) => {
      console.log('üéµ –¢—Ä–µ–∫ –∏–∑–º–µ–Ω–∏–ª—Å—è:', { name: nft.metadata?.name, index });
    },
    onPlaylistUpdate: (playlist) => {
      console.log('üìã –ü–ª–µ–π–ª–∏—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω:', playlist.length, '—Ç—Ä–µ–∫–æ–≤');
    }
  });

  // –•—É–∫ —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  const progressTimer = useProgressTimer({
    onTimeUpdate: (currentTime, duration, progress) => {
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ audioPlayer
    },
    onTrackEnd: () => {
      console.log('üîÑ –¢—Ä–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π');
      handleTrackEnd();
    },
    onListenThresholdReached: (currentTime, duration) => {
      const currentNft = playlistManager.getCurrentTrack();
      if (currentNft && listenTracker.shouldRecord(currentNft, currentTime, duration)) {
        recordListen(currentNft);
      }
    }
  });

  // –•—É–∫ –∞—É–¥–∏–æ –ø–ª–µ–µ—Ä–∞
  const audioPlayer = useAudioPlayer({
    onTimeUpdate: (time, duration) => {
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
      const currentNft = playlistManager.getCurrentTrack();
      if (currentNft && listenTracker.shouldRecord(currentNft, time, duration)) {
        recordListen(currentNft);
      }
    },
    onPlaying: () => {
      progressTimer.start(audioPlayer.audioRef.current);
    },
    onPause: () => {
      progressTimer.pause();
    },
    onEnded: () => {
      handleTrackEnd();
    },
    onError: (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞—É–¥–∏–æ –ø–ª–µ–µ—Ä–∞:', error);
      setIsLoadingTrack(false);
      // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      if (!playlistManager.isEmpty()) {
        setTimeout(() => handleTrackEnd(), 1000);
      }
    },
    onLoadedMetadata: (duration) => {
      progressTimer.setDuration(duration);
    }
  });

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
  const recordListen = useCallback(async (nft: NFT) => {
    if (!listenTracker.canRecord(nft)) return;

    try {
      listenTracker.markAsRecorded(nft);
      const success = await listenRecordService.recordListen(nft);
      
      if (!success) {
        // –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–µ —É–¥–∞–ª–∞—Å—å, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Ç–º–µ—Ç–∫—É
        listenTracker.resetNft?.(nft);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è:', error);
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Ç–º–µ—Ç–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
      listenTracker.resetNft?.(nft);
    }
  }, [listenTracker]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–µ–∫–∞
  const handleTrackEnd = useCallback(async () => {
    if (!isMountedRef.current) return;

    const nextTrack = playlistManager.getNextTrack();
    
    if (nextTrack) {
      await playNextTrack();
    } else {
      // –ü–ª–µ–π–ª–∏—Å—Ç –∑–∞–∫–æ–Ω—á–∏–ª—Å—è
      closePlayer();
    }
  }, [playlistManager]);

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º—É–∑—ã–∫–∏ –¥–ª—è NFT
  const generateMusicForNft = useCallback(async (nft: NFT): Promise<string> => {
    if (!token) {
      throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    const cachedUrl = musicCache.get(nft);
    if (cachedUrl) {
      console.log('üíæ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º—É–∑—ã–∫—É –¥–ª—è:', nft.metadata?.name);
      return cachedUrl;
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –º—É–∑—ã–∫—É
    console.log('üéº –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º—É–∑—ã–∫—É –¥–ª—è:', nft.metadata?.name);
    
    const audioUrl = await musicGenerationService.generateMusicWithRetry(
      nft,
      () => musicApiKey.getValidKey(token),
      () => musicApiKey.refreshKey(token)
    );

    // –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    musicCache.set(nft, audioUrl);
    
    return audioUrl;
  }, [token, musicCache, musicApiKey]);

  // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç—Ä–µ–∫–∞
  const preloadNextTrack = useCallback(async () => {
    const nextTrack = playlistManager.getNextTrack();
    if (!nextTrack || !token) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –≤ –∫–µ—à–µ
    if (musicCache.has(nextTrack)) {
      console.log('üíæ –°–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫ —É–∂–µ –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞–Ω');
      return;
    }

    try {
      console.log('‚è≥ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫:', nextTrack.metadata?.name);
      await musicGenerationService.preloadMusic(
        nextTrack,
        () => musicApiKey.getValidKey(token),
        (url) => musicCache.set(nextTrack, url),
        (error) => console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏:', error)
      );
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç—Ä–µ–∫–∞:', error);
    }
  }, [playlistManager, musicCache, musicApiKey, token]);

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
  const playNft = useCallback(async (nft: NFT, nfts: NFT[] = []) => {
    if (!token) {
      console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      return;
    }

    console.log('üéØ –ó–∞–ø—É—Å–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è NFT:', {
      name: nft.metadata?.name,
      address: nft.address,
      playlistSize: nfts.length
    });

    try {
      setIsLoadingTrack(true);
      setIsPlayerVisible(true);

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–µ–π–ª–∏—Å—Ç
      const finalPlaylist = nfts.length > 0 ? nfts : [nft];
      playlistManager.updatePlaylist(finalPlaylist, nft);

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º—É–∑—ã–∫—É
      const audioUrl = await generateMusicForNft(nft);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —Ç—Ä–µ–∫
      await audioPlayer.controls.loadTrack(audioUrl);
      await audioPlayer.controls.play();

      setIsLoadingTrack(false);

      // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫
      if (finalPlaylist.length > 1) {
        preloadNextTrack();
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', error);
      setIsLoadingTrack(false);
      // –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–ª–µ–µ—Ä, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç—Ä–µ–∫
    }
  }, [token, playlistManager, generateMusicForNft, audioPlayer, preloadNextTrack]);

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫
  const playNextTrack = useCallback(async () => {
    const nextNft = playlistManager.moveToNext();
    if (!nextNft) {
      console.log('üî¥ –°–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      closePlayer();
      return;
    }

    try {
      setIsLoadingTrack(true);
      progressTimer.stop();

      const audioUrl = await generateMusicForNft(nextNft);
      await audioPlayer.controls.loadTrack(audioUrl);
      await audioPlayer.controls.play();

      setIsLoadingTrack(false);

      // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫
      preloadNextTrack();

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫:', error);
      setIsLoadingTrack(false);
      
      // –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫
      const hasNext = !playlistManager.isEmpty() && playlistManager.getNextTrack();
      if (hasNext) {
        setTimeout(() => playNextTrack(), 1000);
      } else {
        closePlayer();
      }
    }
  }, [playlistManager, generateMusicForNft, audioPlayer, progressTimer, preloadNextTrack]);

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç—Ä–µ–∫
  const playPreviousTrack = useCallback(async () => {
    const prevNft = playlistManager.moveToPrevious();
    if (!prevNft) {
      console.log('üî¥ –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ç—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    try {
      setIsLoadingTrack(true);
      progressTimer.stop();

      const audioUrl = await generateMusicForNft(prevNft);
      await audioPlayer.controls.loadTrack(audioUrl);
      await audioPlayer.controls.play();

      setIsLoadingTrack(false);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç—Ä–µ–∫:', error);
      setIsLoadingTrack(false);
    }
  }, [playlistManager, generateMusicForNft, audioPlayer, progressTimer]);

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º
  const togglePlay = useCallback(() => {
    if (audioPlayer.state.isPlaying) {
      audioPlayer.controls.pause();
    } else {
      audioPlayer.controls.play();
    }
  }, [audioPlayer]);

  // –ü–µ—Ä–µ–º–æ—Ç–∫–∞
  const seekTo = useCallback((percentage: number) => {
    const newTime = (percentage / 100) * audioPlayer.state.duration;
    audioPlayer.controls.seekTo(newTime);
    progressTimer.setTime(newTime);
  }, [audioPlayer, progressTimer]);

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç—å—é
  const changeVolume = useCallback((volume: number) => {
    audioPlayer.controls.setVolume(volume);
  }, [audioPlayer]);

  const toggleMute = useCallback(() => {
    audioPlayer.controls.toggleMute();
  }, [audioPlayer]);

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–ª–µ–µ—Ä–∞
  const closePlayer = useCallback(() => {
    audioPlayer.controls.stop();
    progressTimer.stop();
    setIsPlayerVisible(false);
    setIsLoadingTrack(false);
    playlistManager.clear();
    console.log('üî¥ –ü–ª–µ–µ—Ä –∑–∞–∫—Ä—ã—Ç');
  }, [audioPlayer, progressTimer, playlistManager]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞
  const updatePlaylist = useCallback((nfts: NFT[]) => {
    playlistManager.updatePlaylist(nfts);
  }, [playlistManager]);

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    isMountedRef.current = true;
    
    return () => {
      isMountedRef.current = false;
      musicCache.clear();
      listenTracker.clear();
      musicApiKey.clearCache();
      musicGenerationService.cleanup();
      listenRecordService.cleanup();
    };
  }, [musicCache, listenTracker, musicApiKey]);

  // –ó–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  const value: PlayerContextType = {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    currentNft: playlistManager.getCurrentTrack(),
    isPlaying: audioPlayer.state.isPlaying,
    isPlayerVisible,
    progress: audioPlayer.state.progress,
    duration: audioPlayer.state.duration,
    currentTime: audioPlayer.state.currentTime,
    volume: audioPlayer.state.volume,
    isMuted: audioPlayer.state.isMuted,
    playlist: playlistManager.playlist,
    isLoadingTrack,

    // –ú–µ—Ç–æ–¥—ã
    updatePlaylist,
    playNft,
    togglePlay,
    seekTo,
    closePlayer,
    playNextTrack,
    playPreviousTrack,
    changeVolume,
    toggleMute
  };

  return (
    <PlayerContext.Provider value={value}>
      <audio ref={audioPlayer.audioRef} style={{ display: 'none' }} />
      {children}
    </PlayerContext.Provider>
  );
}

export const usePlayer = (): PlayerContextType => {
  const context = useContext(PlayerContext);
  if (!context) {
    throw new Error('usePlayer must be used within PlayerProvider');
  }
  return context;
};