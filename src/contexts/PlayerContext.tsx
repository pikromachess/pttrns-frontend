// src/contexts/PlayerContext.tsx
import { 
  createContext, 
  useContext, 
  useState, 
  useEffect, 
  useCallback,
  useRef  
} from 'react';

import type { PlayerContextType, PlayerProviderProps } from '../types/player';
import type { NFT } from '../types/nft';
import { BackendTokenContext } from '../BackendTokenContext';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –Ω–æ–≤—ã–µ —Ö—É–∫–∏
import { useAudioPlayer } from '../hooks/useAudioPlayer';
import { useMusicCache } from '../hooks/useMusicCache';
import { useListenTracker } from '../hooks/useListenTracker';
import { useMusicApiKey } from '../hooks/useMusicApiKey';
import { usePlaylistManager } from '../hooks/usePlaylistManager';
import { useProgressTimer } from '../hooks/useProgressTimer';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
import { musicGenerationService } from '../services/musicGenerationService';
import { listenRecordService } from '../services/listenRecordService';

const PlayerContext = createContext<PlayerContextType | undefined>(undefined);

export function PlayerProvider({ children }: PlayerProviderProps) {
  // –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–µ–µ—Ä–∞
  const [isPlayerVisible, setIsPlayerVisible] = useState(false);
  const [progress, setProgress] = useState(0);
  const [duration, setDuration] = useState(180);
  const [currentTime, setCurrentTime] = useState(0);
  const [volume, setVolume] = useState(0.8);
  const [isMuted, setIsMuted] = useState(false);
  const [previousVolume, setPreviousVolume] = useState(0.8);
  const [playlist, setPlaylist] = useState<NFT[]>([]);
  const [currentTrackIndex, setCurrentTrackIndex] = useState(-1);
  const [isLoadingTrack, setIsLoadingTrack] = useState(false);
  const audioRef = useRef<HTMLAudioElement>(null);
  const intervalRef = useRef<NodeJS.Timeout | null>(null);
  const { token } = useContext(BackendTokenContext);
  
  // Ref –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const isMountedRef = useRef(true);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—É–∫–∏
  const musicCache = useMusicCache({ maxSize: 50, maxAge: 30 * 60 * 1000 });
  const listenTracker = useListenTracker();
  const musicApiKey = useMusicApiKey();

  // –•—É–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–æ–º
  const playlistManager = usePlaylistManager({
    onTrackChange: useCallback((nft: NFT, index: number) => {
      console.log('üéµ –¢—Ä–µ–∫ –∏–∑–º–µ–Ω–∏–ª—Å—è:', { name: nft.metadata?.name, index });
    }, []),
    onPlaylistUpdate: useCallback((playlist: NFT[]) => {
      console.log('üìã –ü–ª–µ–π–ª–∏—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω:', playlist.length, '—Ç—Ä–µ–∫–æ–≤');
    }, [])
  });

  // –•—É–∫ —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  const progressTimer = useProgressTimer({
    onTimeUpdate: useCallback(() => {
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ audioPlayer
    }, []),
    onTrackEnd: useCallback(() => {
      console.log('üîÑ –¢—Ä–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π');
      handleTrackEnd();
    }, []), // –î–æ–±–∞–≤–∏–º handleTrackEnd –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø–æ–∑–∂–µ
    onListenThresholdReached: useCallback((currentTime: number, duration: number) => {
      const currentNft = playlistManager.getCurrentTrack();
      if (currentNft && listenTracker.shouldRecord(currentNft, currentTime, duration)) {
        recordListen(currentNft);
      }
    }, [playlistManager, listenTracker]) // –°—Ç–∞–±–∏–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
  });

  // –•—É–∫ –∞—É–¥–∏–æ –ø–ª–µ–µ—Ä–∞
  const audioPlayer = useAudioPlayer({
    onTimeUpdate: useCallback((time: number, duration: number) => {
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
      const currentNft = playlistManager.getCurrentTrack();
      if (currentNft && listenTracker.shouldRecord(currentNft, time, duration)) {
        recordListen(currentNft);
      }
    }, [playlistManager, listenTracker]),
    onPlaying: useCallback(() => {
      progressTimer.start(audioPlayer.audioRef.current);
    }, [progressTimer]),
    onPause: useCallback(() => {
      progressTimer.pause();
    }, [progressTimer]),
    onEnded: useCallback(() => {
      handleTrackEnd();
    }, []), // –î–æ–±–∞–≤–∏–º handleTrackEnd –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø–æ–∑–∂–µ
    onError: useCallback((error: string) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞—É–¥–∏–æ –ø–ª–µ–µ—Ä–∞:', error);
      setIsLoadingTrack(false);
      // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      if (!playlistManager.isEmpty()) {
        setTimeout(() => handleTrackEnd(), 1000);
      }
    }, [playlistManager]),
    onLoadedMetadata: useCallback((duration: number) => {
      progressTimer.setDuration(duration);
    }, [progressTimer])
  });

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
  const recordListen = useCallback(async (nft: NFT) => {
    if (!listenTracker.canRecord(nft)) return;

    try {
      listenTracker.markAsRecorded(nft);
      const success = await listenRecordService.recordListen(nft);
      
      if (!success) {
        // –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–µ —É–¥–∞–ª–∞—Å—å, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Ç–º–µ—Ç–∫—É
        listenTracker.resetNft?.(nft);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è:', error);
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Ç–º–µ—Ç–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
      listenTracker.resetNft?.(nft);
    }
  }, [listenTracker]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–µ–∫–∞
  const handleTrackEnd = useCallback(async () => {
    if (!isMountedRef.current) return;

    const nextTrack = playlistManager.getNextTrack();
    
    if (nextTrack) {
      await playNextTrack();
    } else {
      // –ü–ª–µ–π–ª–∏—Å—Ç –∑–∞–∫–æ–Ω—á–∏–ª—Å—è
      closePlayer();
    }
  }, [playlistManager]);

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º—É–∑—ã–∫–∏ –¥–ª—è NFT
  const generateMusicForNft = useCallback(async (nft: NFT): Promise<string> => {
    if (!token) {
      throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    const cachedUrl = musicCache.get(nft);
    if (cachedUrl) {
      console.log('üíæ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º—É–∑—ã–∫—É –¥–ª—è:', nft.metadata?.name);
      return cachedUrl;
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –º—É–∑—ã–∫—É
    console.log('üéº –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º—É–∑—ã–∫—É –¥–ª—è:', nft.metadata?.name);
    
    const audioUrl = await musicGenerationService.generateMusicWithRetry(
      nft,
      () => musicApiKey.getValidKey(token),
      () => musicApiKey.refreshKey(token)
    );

    // –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    musicCache.set(nft, audioUrl);
    
    return audioUrl;
  }, [token, musicCache, musicApiKey]);

  // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç—Ä–µ–∫–∞
  const preloadNextTrack = useCallback(async () => {
    const nextTrack = playlistManager.getNextTrack();
    if (!nextTrack || !token) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –≤ –∫–µ—à–µ
    if (musicCache.has(nextTrack)) {
      console.log('üíæ –°–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫ —É–∂–µ –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞–Ω');
      return;
    }

    try {
      console.log('‚è≥ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫:', nextTrack.metadata?.name);
      await musicGenerationService.preloadMusic(
        nextTrack,
        () => musicApiKey.getValidKey(token),
        (url) => musicCache.set(nextTrack, url),
        (error) => console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏:', error)
      );
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç—Ä–µ–∫–∞:', error);
    }
  }, [playlistManager, musicCache, musicApiKey, token]);

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
  const playNft = async (nft: NFT, nfts: NFT[] = []) => {
    console.log('üéØ –ó–∞–ø—É—Å–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è NFT:', {
      name: nft.metadata?.name,
      address: nft.address,
      playlistSize: nfts.length
    });
    
    // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –¥–ª—è –ù–û–í–û–ì–û —Ç—Ä–µ–∫–∞
    listenRecordedRef.current = false;
    
    // –í–ê–ñ–ù–û: –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —É NFT –µ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    let enrichedNft = { ...nft };
    
    // –ï—Å–ª–∏ –∫–æ–ª–ª–µ–∫—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –Ω–æ –µ—Å—Ç—å –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ, –±–µ—Ä–µ–º –æ—Ç—Ç—É–¥–∞
    if (!enrichedNft.collection?.address && nfts.length > 0) {
      const nftInPlaylist = nfts.find(n => n.address === nft.address);
      if (nftInPlaylist?.collection?.address) {
        enrichedNft.collection = nftInPlaylist.collection;
        console.log('üîß –î–æ–ø–æ–ª–Ω–∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞:', enrichedNft.collection.address);
      }
    }
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ NFT –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('üéµ –§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ NFT –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', {
      name: enrichedNft.metadata?.name,
      address: enrichedNft.address,
      collectionName: enrichedNft.collection?.name,
      collectionAddress: enrichedNft.collection?.address
    });
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–ª–µ–π–ª–∏—Å—Ç –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    const orderedPlaylist = nfts.length > 0 ? nfts : [enrichedNft];
    const selectedIndex = orderedPlaylist.findIndex(item => 
      item.address === enrichedNft.address || 
      (item.index === enrichedNft.index && !item.address && !enrichedNft.address)
    );
    
    const startIndex = selectedIndex !== -1 ? selectedIndex : 0;
    
    console.log('üìã –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–µ–π–ª–∏—Å—Ç:', {
      total: orderedPlaylist.length,
      startIndex,
      currentTrack: enrichedNft.metadata?.name,
      collectionAddress: enrichedNft.collection?.address
    });
    
    setPlaylist(orderedPlaylist);
    setCurrentTrackIndex(startIndex);
    setCurrentNft(enrichedNft); // –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã–π NFT
    setIsPlayerVisible(true);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    setIsLoadingTrack(true);
    setIsPlaying(false); // –í–ê–ñ–ù–û: —Å—Ç–∞–≤–∏–º –Ω–∞ –ø–∞—É–∑—É –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è —Ç—Ä–µ–∫
    
    setProgress(0);
    setCurrentTime(0);
    setDuration(180);

    // –ü–æ–ª—É—á–∞–µ–º –∞—É–¥–∏–æ URL –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞
    const cacheKey = getNftCacheKey(enrichedNft);
    let audioUrl = enrichedNft.audioUrl;
    
    // –ï—Å–ª–∏ –∞—É–¥–∏–æ –Ω–µ—Ç –≤ NFT, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º
    if (!audioUrl) {
      if (musicCache.has(cacheKey)) {
        audioUrl = musicCache.get(cacheKey)!;
        console.log('üíæ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞—É–¥–∏–æ –¥–ª—è:', enrichedNft.metadata?.name);
      } else {
        try {
          console.log('üéº –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º—É–∑—ã–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞:', enrichedNft.metadata?.name);
          audioUrl = await generateMusicWithToken(enrichedNft, token!);
          musicCache.set(cacheKey, audioUrl);
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏:', error);
          setIsLoadingTrack(false);
          setIsPlaying(false);
          return;
        }
      }
    }

    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫
    if (audioRef.current && audioUrl) {
      try {
        await audioRef.current.pause();
        audioRef.current.currentTime = 0;
        audioRef.current.src = audioUrl;
        audioRef.current.volume = isMuted ? 0 : volume;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        audioRef.current.addEventListener('loadedmetadata', () => {
          if (audioRef.current) {
            const newDuration = audioRef.current.duration || 180;
            setDuration(newDuration);
            console.log('üìä –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', {
              trackName: enrichedNft.metadata?.name,
              duration: newDuration,
              listenThreshold: Math.min(30, newDuration * 0.8)
            });
          }
        }, { once: true });

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –Ω–∞—á–∞–ª–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        audioRef.current.addEventListener('playing', () => {
          console.log('‚ñ∂Ô∏è –û—Å–Ω–æ–≤–Ω–æ–π —Ç—Ä–µ–∫ –Ω–∞—á–∞–ª –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è');
          setIsLoadingTrack(false);
          setIsPlaying(true);
          startProgressTimer();
        }, { once: true });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
        audioRef.current.addEventListener('error', () => {
          console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞');
          setIsLoadingTrack(false);
          setIsPlaying(false);
        }, { once: true });

        const playPromise = audioRef.current.play();
        if (playPromise !== undefined) {
          await playPromise;
          // –ï—Å–ª–∏ play() —É—Å–ø–µ—à–µ–Ω, –Ω–æ —Å–æ–±—ã—Ç–∏–µ 'playing' –º–æ–∂–µ—Ç –µ—â–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å
          setTimeout(() => {
            if (audioRef.current && !audioRef.current.paused) {
              setIsLoadingTrack(false);
              setIsPlaying(true);
              startProgressTimer();
            }
          }, 100);
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', error);
        setIsLoadingTrack(false);
        setIsPlaying(false);
      }
    }

    // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫
    if (orderedPlaylist.length > 1) {
      preloadNextTrack(startIndex);
    }
  };

  const startProgressTimer = useCallback(() => {
    if (intervalRef.current) {
      clearInterval(intervalRef.current);
    }
    
    intervalRef.current = setInterval(() => {
      if (!audioRef.current) {
        // Fallback —Ä–µ–∂–∏–º –±–µ–∑ –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        setCurrentTime(prev => {
          const newTime = prev + 1;
          
          // –£—Å–ª–æ–≤–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è:
          // 1. –ü—Ä–æ—Å–ª—É—à–∞–Ω–æ 30+ —Å–µ–∫—É–Ω–¥ –ò–õ–ò
          // 2. –ü—Ä–æ—Å–ª—É—à–∞–Ω–æ 80%+ –æ—Ç –æ–±—â–µ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–∫–∞ (–¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ç—Ä–µ–∫–æ–≤)
          const listenThreshold = Math.min(30, duration * 0.8);
          
          if (newTime >= listenThreshold && !listenRecordedRef.current && currentNft) {
            console.log('‚è∞ –£—Å–ª–æ–≤–∏–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (fallback —Ä–µ–∂–∏–º):', {
              currentTime: newTime,
              duration,
              threshold: listenThreshold,
              trackName: currentNft.metadata?.name,
              nftAddress: currentNft.address,
              collectionAddress: currentNft.collection?.address
            });
            listenRecordedRef.current = true;
            recordListen(currentNft);
          }
          
          if (newTime >= duration - 1) {
            console.log('üîÑ –¢—Ä–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω (fallback), –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π');
            playNextTrackRef.current?.();
            return 0;
          }
          setProgress((newTime / duration) * 100);
          return newTime;
        });
        return;
      }

      // –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∂–∏–º —Å –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç–æ–º
      const actualTime = audioRef.current.currentTime;
      const actualDuration = audioRef.current.duration || duration;
      
      // –£—Å–ª–æ–≤–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è:
      // 1. –ü—Ä–æ—Å–ª—É—à–∞–Ω–æ 30+ —Å–µ–∫—É–Ω–¥ –ò–õ–ò
      // 2. –ü—Ä–æ—Å–ª—É—à–∞–Ω–æ 80%+ –æ—Ç –æ–±—â–µ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–∫–∞ (–¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ç—Ä–µ–∫–æ–≤)
      const listenThreshold = Math.min(30, actualDuration * 0.8);
      
      if (actualTime >= listenThreshold && !listenRecordedRef.current && currentNft) {
        console.log('‚è∞ –£—Å–ª–æ–≤–∏–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:', {
          actualTime,
          actualDuration,
          threshold: listenThreshold,
          trackName: currentNft.metadata?.name,
          nftAddress: currentNft.address,
          collectionAddress: currentNft.collection?.address
        });
        
        // –í–ê–ñ–ù–û: –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é currentNft –Ω–∞ –º–æ–º–µ–Ω—Ç –∑–∞–ø–∏—Å–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è race conditions
        const nftToRecord = { ...currentNft };
        listenRecordedRef.current = true;
        recordListen(nftToRecord);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ –∫–æ–Ω—Ü–∞ —Ç—Ä–µ–∫–∞
      if (actualTime >= actualDuration - 0.5) {
        console.log('üîÑ –¢—Ä–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π');
        
        // –ï—Å–ª–∏ —Ç—Ä–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –µ—â–µ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–æ (–æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–π —Ç—Ä–µ–∫)
        if (!listenRecordedRef.current && currentNft && actualTime >= actualDuration * 0.5) {
          console.log('üìù –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ —Ç—Ä–µ–∫–∞');
          const nftToRecord = { ...currentNft };
          listenRecordedRef.current = true;
          recordListen(nftToRecord);
        }
        
        playNextTrackRef.current?.();
        return;
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –≤—Ä–µ–º—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞—É–¥–∏–æ –∏–≥—Ä–∞–µ—Ç
      if (!audioRef.current.paused) {
        setCurrentTime(actualTime);
        setProgress((actualTime / actualDuration) * 100);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –µ—Å–ª–∏ –æ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
        if (actualDuration !== duration && !isNaN(actualDuration)) {
          setDuration(actualDuration);
        }
      }
    }, 1000);
  }, [duration, currentNft, recordListen]);

  const togglePlay = useCallback(() => {
    if (isPlaying) {
      setIsPlaying(false);
      if (audioRef.current) {
        audioRef.current.pause();
      }
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
      }
    } else {
      setIsPlaying(true);
      if (audioRef.current) {
        audioRef.current.play().catch(error => {
          console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', error);
          setIsPlaying(false);
        });
      }
      startProgressTimer();
    }
  }, [isPlaying, startProgressTimer]);

  const seekTo = useCallback((percentage: number) => {
    const newTime = (percentage / 100) * duration;
    
    console.log('‚è© Seeking to:', { percentage, newTime, duration });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    setCurrentTime(newTime);
    setProgress(percentage);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫ –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç—É
    if (audioRef.current) {
      audioRef.current.currentTime = newTime;
    }
    
    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞, –µ—Å–ª–∏ –º—É–∑—ã–∫–∞ –∏–≥—Ä–∞–µ—Ç
    if (isPlaying) {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
      }
      startProgressTimer();
    }
  }, [duration, isPlaying, startProgressTimer]);

  const closePlayer = () => {
    if (currentNft?.audioUrl) {
      URL.revokeObjectURL(currentNft.audioUrl);
    }

    setIsPlayerVisible(false);
    setIsPlaying(false);
    setCurrentNft(null);
    setCurrentTrackIndex(-1);
    setIsLoadingTrack(false);
    listenRecordedRef.current = false;
    if (intervalRef.current) clearInterval(intervalRef.current);
    if (audioRef.current) {
      audioRef.current.pause();
      audioRef.current.src = '';
    }
  };

  // –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫
  const playNextTrack = async () => {
    if (playlist.length === 0) {
      console.log('üî¥ –ü–ª–µ–π–ª–∏—Å—Ç –ø—É—Å—Ç, –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–ª–µ–µ—Ä');
      closePlayer();
      return;
    }
    
    if (!token) {
      console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      return;
    }
    
    const nextIndex = (currentTrackIndex + 1) % playlist.length;
    const nextNft = playlist[nextIndex];
    const cacheKey = getNftCacheKey(nextNft);
    
    console.log('‚è≠Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫:', {
      currentIndex: currentTrackIndex,
      nextIndex,
      trackName: nextNft.metadata?.name,
      playlistLength: playlist.length,
      collectionAddress: nextNft.collection?.address
    });

    if (!isMountedRef.current) return;
    
    // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –¥–ª—è –ù–û–í–û–ì–û —Ç—Ä–µ–∫–∞
    listenRecordedRef.current = false;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    setIsLoadingTrack(true);
    setIsPlaying(false); // –í–ê–ñ–ù–û: —Å—Ç–∞–≤–∏–º –Ω–∞ –ø–∞—É–∑—É –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è —Ç—Ä–µ–∫
    
    setCurrentTrackIndex(nextIndex);
    setCurrentNft(nextNft);
    setProgress(0);
    setCurrentTime(0);
    setDuration(180);
    
    try {
      let audioUrl: string;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
      if (musicCache.has(cacheKey)) {
        audioUrl = musicCache.get(cacheKey)!;
        console.log('üíæ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç—Ä–µ–∫');
      } else {
        console.log('üéº –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º—É–∑—ã–∫—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç—Ä–µ–∫–∞');
        audioUrl = await generateMusicWithToken(nextNft, token);
        musicCache.set(cacheKey, audioUrl);
      }
      
      // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫
      if (audioRef.current) {
        await audioRef.current.pause();
        audioRef.current.currentTime = 0;
        audioRef.current.src = audioUrl;
        audioRef.current.volume = isMuted ? 0 : volume;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        audioRef.current.addEventListener('loadedmetadata', () => {
          if (audioRef.current) {
            const newDuration = audioRef.current.duration || 180;
            setDuration(newDuration);
            console.log('üìä –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç—Ä–µ–∫–∞:', {
              trackName: nextNft.metadata?.name,
              duration: newDuration
            });
          }
        }, { once: true });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –Ω–∞—á–∞–ª–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        audioRef.current.addEventListener('playing', () => {
          console.log('‚ñ∂Ô∏è –¢—Ä–µ–∫ –Ω–∞—á–∞–ª –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è');
          setIsLoadingTrack(false);
          setIsPlaying(true);
          startProgressTimer();
        }, { once: true });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
        audioRef.current.addEventListener('error', () => {
          console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–∞');
          setIsLoadingTrack(false);
          setIsPlaying(false);
        }, { once: true });
        
        // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞—á–∞—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
        const playPromise = audioRef.current.play();
        if (playPromise !== undefined) {
          await playPromise;
          // –ï—Å–ª–∏ play() —É—Å–ø–µ—à–µ–Ω, –Ω–æ —Å–æ–±—ã—Ç–∏–µ 'playing' –º–æ–∂–µ—Ç –µ—â–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã
          setTimeout(() => {
            if (audioRef.current && !audioRef.current.paused) {
              setIsLoadingTrack(false);
              setIsPlaying(true);
              startProgressTimer();
            }
          }, 100);
        }
      }
      
      // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫
      preloadNextTrack();

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç—Ä–µ–∫–∞:', error);
      setIsLoadingTrack(false);
      setIsPlaying(false);
      
      // –ü—Ä–æ–±—É–µ–º –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω—ã–π —Ç—Ä–µ–∫
      if (playlist.length > 1) {
        const skipIndex = (nextIndex + 1) % playlist.length;
        if (skipIndex !== currentTrackIndex) { // –ò–∑–±–µ–≥–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π —Ä–µ–∫—É—Ä—Å–∏–∏
          console.log('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π —Ç—Ä–µ–∫, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π');
          await playNextTrack();
        } else {
          closePlayer();
        }
      } else {
        closePlayer();
      }
    }
  }, [playlistManager, generateMusicForNft, audioPlayer, progressTimer, preloadNextTrack]);

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç—Ä–µ–∫
  const playPreviousTrack = useCallback(async () => {
    const prevNft = playlistManager.moveToPrevious();
    if (!prevNft) {
      console.log('üî¥ –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ç—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    const prevIndex = (currentTrackIndex - 1 + playlist.length) % playlist.length;
    const prevNft = playlist[prevIndex];
    const cacheKey = getNftCacheKey(prevNft);
    
    console.log('‚èÆÔ∏è –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç—Ä–µ–∫:', {
      currentIndex: currentTrackIndex,
      prevIndex,
      trackName: prevNft.metadata?.name,
      playlistLength: playlist.length,
      collectionAddress: prevNft.collection?.address
    });

    if (!isMountedRef.current) return;
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–∫–∞
    listenRecordedRef.current = false;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    setIsLoadingTrack(true);
    setIsPlaying(false); // –í–ê–ñ–ù–û: —Å—Ç–∞–≤–∏–º –Ω–∞ –ø–∞—É–∑—É –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è —Ç—Ä–µ–∫
    
    setCurrentTrackIndex(prevIndex);
    setCurrentNft(prevNft);
    setProgress(0);
    setCurrentTime(0);
    setDuration(180);
    
    try {
      let audioUrl: string;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
      if (musicCache.has(cacheKey)) {
        audioUrl = musicCache.get(cacheKey)!;
        console.log('üíæ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç—Ä–µ–∫');
      } else {
        console.log('üéº –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º—É–∑—ã–∫—É –¥–ª—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞');
        audioUrl = await generateMusicWithToken(prevNft, token);
        musicCache.set(cacheKey, audioUrl);
      }
      
      // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç—Ä–µ–∫
      if (audioRef.current) {
        await audioRef.current.pause();
        audioRef.current.currentTime = 0;
        audioRef.current.src = audioUrl;
        audioRef.current.volume = isMuted ? 0 : volume;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        audioRef.current.addEventListener('loadedmetadata', () => {
          if (audioRef.current) {
            setDuration(audioRef.current.duration || 180);
          }
        }, { once: true });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –Ω–∞—á–∞–ª–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        audioRef.current.addEventListener('playing', () => {
          console.log('‚ñ∂Ô∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ç—Ä–µ–∫ –Ω–∞—á–∞–ª –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è');
          setIsLoadingTrack(false);
          setIsPlaying(true);
          startProgressTimer();
        }, { once: true });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
        audioRef.current.addEventListener('error', () => {
          console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞');
          setIsLoadingTrack(false);
          setIsPlaying(false);
        }, { once: true });
        
        // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞—á–∞—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
        const playPromise = audioRef.current.play();
        if (playPromise !== undefined) {
          await playPromise;
          // –ï—Å–ª–∏ play() —É—Å–ø–µ—à–µ–Ω, –Ω–æ —Å–æ–±—ã—Ç–∏–µ 'playing' –º–æ–∂–µ—Ç –µ—â–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å
          setTimeout(() => {
            if (audioRef.current && !audioRef.current.paused) {
              setIsLoadingTrack(false);
              setIsPlaying(true);
              startProgressTimer();
            }
          }, 100);
        }
      }
      
      // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫
      if (playlist.length > 1) {
        preloadNextTrack(prevIndex);
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞:', error);
      setIsLoadingTrack(false);
      setIsPlaying(false);
      
      // –ü—Ä–æ–±—É–µ–º –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω—ã–π —Ç—Ä–µ–∫
      if (playlist.length > 1) {
        const skipIndex = (prevIndex - 1 + playlist.length) % playlist.length;
        if (skipIndex !== currentTrackIndex) { // –ò–∑–±–µ–≥–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π —Ä–µ–∫—É—Ä—Å–∏–∏
          console.log('‚èÆÔ∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π —Ç—Ä–µ–∫, –ø—Ä–æ–±—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π');
          await playPreviousTrack();
        } else {
          closePlayer();
        }
      } else {
        closePlayer();
      }
    }
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞
  const updatePlaylist = useCallback((nfts: NFT[]) => {
    playlistManager.updatePlaylist(nfts);
  }, [playlistManager]);

  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ useEffect - –æ—á–∏—Å—Ç–∫–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    isMountedRef.current = true;
    
    return () => {
      isMountedRef.current = false;
      // –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
      musicCache.clear();
      listenTracker.clear();
    };
  }, []);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç–∞
  useEffect(() => {
    const audio = audioRef.current;
    if (!audio) return;

    const handleEnded = () => {
      console.log('üîÑ –ê—É–¥–∏–æ —Ç—Ä–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π');
      playNextTrack();
    };

    const handleError = (e: Event) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ:', e);
      setIsPlaying(false);
      setIsLoadingTrack(false);
      // –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      if (playlist.length > 1) {
        setTimeout(() => playNextTrack(), 1000);
      }
    };

    const handleLoadStart = () => {
      console.log('‚è≥ –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ');
    };

    const handleCanPlay = () => {
      console.log('‚úÖ –ê—É–¥–∏–æ –≥–æ—Ç–æ–≤–æ –∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—é');
    };

    const handleLoadedMetadata = () => {
      console.log('üìä –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∞—É–¥–∏–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:', audio.duration);
      if (audio.duration && !isNaN(audio.duration)) {
        setDuration(audio.duration);
      }
    };

    audio.addEventListener('ended', handleEnded);
    audio.addEventListener('error', handleError);
    audio.addEventListener('loadstart', handleLoadStart);
    audio.addEventListener('canplay', handleCanPlay);
    audio.addEventListener('loadedmetadata', handleLoadedMetadata);

    return () => {
      audio.removeEventListener('ended', handleEnded);
      audio.removeEventListener('error', handleError);
      audio.removeEventListener('loadstart', handleLoadStart);
      audio.removeEventListener('canplay', handleCanPlay);
      audio.removeEventListener('loadedmetadata', handleLoadedMetadata);
    };
  }, []); // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π!

  // –ó–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  const value: PlayerContextType = {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    currentNft: playlistManager.getCurrentTrack(),
    isPlaying: audioPlayer.state.isPlaying,
    isPlayerVisible,
    progress,
    duration,
    currentTime,
    volume,
    isMuted,
    playlist,
    isLoadingTrack,
    updatePlaylist,
    playNft,
    togglePlay,
    seekTo,
    closePlayer,
    playNextTrack,
    playPreviousTrack,
    changeVolume,
    toggleMute
  };

  return (
    <PlayerContext.Provider value={value}>
      <audio ref={audioPlayer.audioRef} style={{ display: 'none' }} />
      {children}
    </PlayerContext.Provider>
  );
}

export const usePlayer = (): PlayerContextType => {
  const context = useContext(PlayerContext);
  if (!context) {
    throw new Error('usePlayer must be used within PlayerProvider');
  }
  return context;
};