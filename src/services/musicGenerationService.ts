// src/services/musicGenerationService.ts
import type { NFT } from '../types/nft';
import type { MusicGenerationRequest, MusicGenerationOptions, MusicApiKeyData } from '../types/musicApi';

export class MusicGenerationService {
  private apiKeyCache: {
    key: string;
    expiresAt: Date;
    serverUrl: string;
  } | null = null;

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º—É–∑—ã–∫—É –¥–ª—è NFT
   */
  async generateMusic(
    nft: NFT, 
    getApiKey: () => Promise<MusicApiKeyData | null>,
    options: Partial<MusicGenerationOptions> = {}
  ): Promise<string> {
    const config: MusicGenerationOptions = {
      retryOnAuthError: true,
      timeout: 30000,
      ...options
    };

    try {
      console.log('üéº –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –º—É–∑—ã–∫–∏ –¥–ª—è NFT:', nft.metadata?.name);

      const apiKeyData = await getApiKey();
      if (!apiKeyData) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏');
      }

      const audioBlob = await this.makeGenerationRequest(nft, apiKeyData, config);
      const audioUrl = URL.createObjectURL(audioBlob);

      console.log('‚úÖ –ú—É–∑—ã–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è NFT:', nft.metadata?.name);
      return audioUrl;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏:', error);
      throw error;
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –º—É–∑—ã–∫–∏
   */
  private async makeGenerationRequest(
    nft: NFT, 
    apiKeyData: MusicApiKeyData, 
    config: MusicGenerationOptions
  ): Promise<Blob> {
    const request: MusicGenerationRequest = {
      metadata: nft.metadata,
      index: nft.index
    };

    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), config.timeout);

    try {
      const response = await fetch(`${apiKeyData.musicServerUrl}/generate-music-stream`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Music-Api-Key': apiKeyData.apiKey,
        },
        body: JSON.stringify(request),
        signal: controller.signal
      });

      clearTimeout(timeoutId);

      if (!response.ok) {
        await this.handleResponseError(response, config);
      }

      return await response.blob();

    } catch (error) {
      clearTimeout(timeoutId);
      
      if (error instanceof Error && error.name === 'AbortError') {
        throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏');
      }
      
      throw error;
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
   */
  private async handleResponseError(
    response: Response, 
    config: MusicGenerationOptions
  ): Promise<never> {
    switch (response.status) {
      case 401:
        if (config.retryOnAuthError) {
          throw new Error('AUTH_EXPIRED'); // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
        }
        throw new Error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏');
      
      case 403:
        throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏');
      
      case 429:
        throw new Error('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
      
      case 503:
        throw new Error('–°–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      
      default:
        const errorText = await response.text().catch(() => '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (${response.status}): ${errorText}`);
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º—É–∑—ã–∫—É —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∫–ª—é—á–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
   */
  async generateMusicWithRetry(
    nft: NFT,
    getApiKey: () => Promise<MusicApiKeyData | null>,
    refreshApiKey: () => Promise<MusicApiKeyData | null>,
    options: Partial<MusicGenerationOptions> = {}
  ): Promise<string> {
    try {
      return await this.generateMusic(nft, getApiKey, options);
    } catch (error) {
      // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –∏—Å—Ç–µ—á–µ–Ω–∏–µ–º –∫–ª—é—á–∞, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å
      if (error instanceof Error && error.message === 'AUTH_EXPIRED') {
        console.log('üîë API –∫–ª—é—á –∏—Å—Ç–µ–∫, –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π...');
        
        try {
          const newApiKeyData = await refreshApiKey();
          if (!newApiKeyData) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å API –∫–ª—é—á');
          }

          // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å –Ω–æ–≤—ã–º –∫–ª—é—á–æ–º
          return await this.generateMusic(nft, () => Promise.resolve(newApiKeyData), {
            ...options,
            retryOnAuthError: false // –ù–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
          });
        } catch (refreshError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è API –∫–ª—é—á–∞:', refreshError);
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –∫ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–º—É —Å–µ—Ä–≤–∏—Å—É');
        }
      }

      throw error;
    }
  }

  /**
   * –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º—É–∑—ã–∫–∏ (–¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏)
   */
  async preloadMusic(
    nft: NFT,
    getApiKey: () => Promise<MusicApiKeyData | null>,
    onSuccess?: (url: string) => void,
    onError?: (error: Error) => void
  ): Promise<void> {
    try {
      console.log('‚è≥ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –º—É–∑—ã–∫–∏ –¥–ª—è:', nft.metadata?.name);
      
      const url = await this.generateMusic(nft, getApiKey, {
        timeout: 45000 // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
      });
      
      onSuccess?.(url);
      console.log('‚úÖ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è:', nft.metadata?.name);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è:', nft.metadata?.name, error);
      onError?.(error instanceof Error ? error : new Error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏'));
    }
  }

  /**
   * –ü–∞–∫–µ—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º—É–∑—ã–∫–∏ –¥–ª—è —Å–ø–∏—Å–∫–∞ NFT
   */
  async generateBatch(
    nfts: NFT[],
    getApiKey: () => Promise<MusicApiKeyData | null>,
    onProgress?: (completed: number, total: number, currentNft: NFT) => void,
    onError?: (nft: NFT, error: Error) => void,
    concurrency: number = 2
  ): Promise<Map<string, string>> {
    console.log(`üéº –ù–∞—á–∏–Ω–∞–µ–º –ø–∞–∫–µ—Ç–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è ${nfts.length} NFT`);
    
    const results = new Map<string, string>();
    const errors: Array<{ nft: NFT; error: Error }> = [];
    
    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–∞—Ç—á–∏ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    for (let i = 0; i < nfts.length; i += concurrency) {
      const batch = nfts.slice(i, i + concurrency);
      
      const promises = batch.map(async (nft) => {
        try {
          const url = await this.generateMusic(nft, getApiKey);
          const key = nft.address || `index-${nft.index}`;
          results.set(key, url);
          
          onProgress?.(results.size, nfts.length, nft);
        } catch (error) {
          const err = error instanceof Error ? error : new Error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
          errors.push({ nft, error: err });
          onError?.(nft, err);
        }
      });
      
      await Promise.all(promises);
    }
    
    console.log(`‚úÖ –ü–∞–∫–µ—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${results.size} —É—Å–ø–µ—à–Ω–æ, ${errors.length} –æ—à–∏–±–æ–∫`);
    return results;
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ —Å–µ—Ä–≤–∏—Å–∞
   */
  cleanup(): void {
    this.apiKeyCache = null;
    console.log('üßπ –°–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏ –æ—á–∏—â–µ–Ω');
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton —ç–∫–∑–µ–º–ø–ª—è—Ä
export const musicGenerationService = new MusicGenerationService();