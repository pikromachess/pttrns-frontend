import { backendApi } from '../backend-api';
import type { NFT } from '../types/nft';
import type { ListenRecord } from '../types/musicApi';

interface RecordListenOptions {
  retryAttempts?: number;
  retryDelay?: number;
  timeout?: number;
}

const DEFAULT_OPTIONS: Required<RecordListenOptions> = {
  retryAttempts: 3,
  retryDelay: 1000, // 1 —Å–µ–∫—É–Ω–¥–∞
  timeout: 5000 // 5 —Å–µ–∫—É–Ω–¥
};

export class ListenRecordService {
  private recordQueue: ListenRecord[] = [];
  private isProcessing = false;
  private processingInterval: NodeJS.Timeout | null = null;

  constructor() {
    this.startQueueProcessor();
  }

  /**
   * –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ NFT
   */
  async recordListen(
    nft: NFT, 
    options: Partial<RecordListenOptions> = {}
  ): Promise<boolean> {
    const config = { ...DEFAULT_OPTIONS, ...options };

    if (!this.validateNft(nft)) {
      console.warn('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è:', {
        hasAddress: !!nft.address,
        hasCollectionAddress: !!nft.collection?.address
      });
      return false;
    }

    console.log('üéµ –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –¥–ª—è NFT:', {
      name: nft.metadata?.name,
      address: nft.address,
      collectionAddress: nft.collection?.address
    });

    try {
      const success = await this.makeRecordRequest(nft, config);
      
      if (success) {
        console.log('‚úÖ –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ –¥–ª—è NFT:', nft.metadata?.name);
      } else {
        console.error('‚ùå –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª false –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è');
      }
      
      return success;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è:', error);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
      this.addToQueue({
        nftAddress: nft.address!,
        collectionAddress: nft.collection!.address!,
        timestamp: Date.now()
      });
      
      return false;
    }
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç NFT –¥–ª—è –∑–∞–ø–∏—Å–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
   */
  private validateNft(nft: NFT): boolean {
    return !!(nft.address && nft.collection?.address);
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–ø–∏—Å—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
   */
  private async makeRecordRequest(
    nft: NFT, 
    config: Required<RecordListenOptions>
  ): Promise<boolean> {
    let lastError: Error | null = null;

    for (let attempt = 1; attempt <= config.retryAttempts; attempt++) {
      try {
        console.log(`üì§ –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${config.retryAttempts} –∑–∞–ø–∏—Å–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è`);

        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), config.timeout);

        const success = await backendApi.recordListen(
          nft.address!,
          nft.collection!.address!
        );

        clearTimeout(timeoutId);
        return success;

      } catch (error) {
        lastError = error instanceof Error ? error : new Error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        console.warn(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ—É–¥–∞—á–Ω–∞:`, lastError.message);

        if (attempt < config.retryAttempts) {
          await this.delay(config.retryDelay * attempt); // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        }
      }
    }

    throw lastError || new Error('–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –Ω–µ—É–¥–∞—á–Ω—ã');
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
   */
  private addToQueue(record: ListenRecord): void {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∑–∞–ø–∏—Å–∏ –≤ –æ—á–µ—Ä–µ–¥–∏
    const exists = this.recordQueue.some(
      r => r.nftAddress === record.nftAddress && 
           r.collectionAddress === record.collectionAddress
    );

    if (!exists) {
      this.recordQueue.push(record);
      console.log('üìã –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –≤ –æ—á–µ—Ä–µ–¥—å:', record.nftAddress);
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏
   */
  private startQueueProcessor(): void {
    if (this.processingInterval) return;

    this.processingInterval = setInterval(async () => {
      await this.processQueue();
    }, 30000); // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
  }

  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏
   */
  private stopQueueProcessor(): void {
    if (this.processingInterval) {
      clearInterval(this.processingInterval);
      this.processingInterval = null;
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å –∑–∞–ø–∏—Å–µ–π
   */
  private async processQueue(): Promise<void> {
    if (this.isProcessing || this.recordQueue.length === 0) return;

    this.isProcessing = true;
    console.log(`üìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å: ${this.recordQueue.length} –∑–∞–ø–∏—Å–µ–π`);

    const toProcess = [...this.recordQueue];
    this.recordQueue = [];

    for (const record of toProcess) {
      try {
        const success = await backendApi.recordListen(
          record.nftAddress,
          record.collectionAddress
        );

        if (success) {
          console.log('‚úÖ –ó–∞–ø–∏—Å—å –∏–∑ –æ—á–µ—Ä–µ–¥–∏ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞:', record.nftAddress);
        } else {
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ—á–µ—Ä–µ–¥—å, –µ—Å–ª–∏ –Ω–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–∞—è
          if (Date.now() - record.timestamp < 300000) { // 5 –º–∏–Ω—É—Ç
            this.recordQueue.push(record);
          }
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏:', error);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ—á–µ—Ä–µ–¥—å, –µ—Å–ª–∏ –Ω–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–∞—è
        if (Date.now() - record.timestamp < 300000) { // 5 –º–∏–Ω—É—Ç
          this.recordQueue.push(record);
        }
      }

      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await this.delay(100);
    }

    this.isProcessing = false;
  }

  /**
   * –ü–∞–∫–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π
   */
  async recordBatch(records: Array<{ nft: NFT; timestamp?: number }>): Promise<number> {
    console.log(`üìä –ü–∞–∫–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å ${records.length} –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π`);
    
    let successCount = 0;

    for (const { nft } of records) {
      try {
        const success = await this.recordListen(nft, { retryAttempts: 1 });
        if (success) successCount++;
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –ø–∞–∫–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏:', error);
      }

      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await this.delay(200);
    }

    console.log(`‚úÖ –ü–∞–∫–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${successCount}/${records.length} —É—Å–ø–µ—à–Ω–æ`);
    return successCount;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–∏—Å–∞
   */
  getStats() {
    return {
      queueSize: this.recordQueue.length,
      isProcessing: this.isProcessing,
      hasProcessor: !!this.processingInterval
    };
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
   */
  cleanup(): void {
    this.stopQueueProcessor();
    this.recordQueue = [];
    this.isProcessing = false;
    console.log('üßπ –°–µ—Ä–≤–∏—Å –∑–∞–ø–∏—Å–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π –æ—á–∏—â–µ–Ω');
  }

  /**
   * –§–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏
   */
  async flushQueue(): Promise<void> {
    console.log('üöÄ –§–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏');
    await this.processQueue();
  }

  /**
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
   */
  private delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton —ç–∫–∑–µ–º–ø–ª—è—Ä
export const listenRecordService = new ListenRecordService();