// –í src/utils/debugUtils.ts

import type { SessionError } from '../types/session';

/**
 * –õ–æ–≥–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
 */
export function logSessionRequest(signData: any): void {
  console.log('üîê –î–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏:', {
    hasSignature: !!signData.signature,
    signatureLength: signData.signature?.length || 0,
    address: signData.address,
    domain: signData.domain,
    timestamp: signData.timestamp,
    timestampDate: signData.timestamp ? new Date(signData.timestamp * 1000).toISOString() : null,
    timeDiff: signData.timestamp ? Math.floor(Date.now() / 1000) - signData.timestamp : null,
    payloadType: signData.payload?.type,
    payloadTextLength: signData.payload?.text?.length || 0,
    payloadPreview: signData.payload?.text?.slice(0, 50) + '...' || '–Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞'
  });
}

/**
 * –õ–æ–≥–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –±—ç–∫–µ–Ω–¥–∞
 */
export function logBackendResponse(response: Response, responseText: string): void {
  console.log('üì° –û—Ç–≤–µ—Ç –æ—Ç –±—ç–∫–µ–Ω–¥–∞:', {
    status: response.status,
    statusText: response.statusText,
    ok: response.ok,
    headers: {
      contentType: response.headers.get('content-type'),
      contentLength: response.headers.get('content-length'),
    },
    responseLength: responseText.length,
    responsePreview: responseText.slice(0, 200) + (responseText.length > 200 ? '...' : '')
  });
}

/**
 * –õ–æ–≥–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª–∏ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
 */
export function logMusicRequest(nft: any, sessionId: string, musicServerUrl: string): void {
  console.log('üéµ –î–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É:', {
    nftAddress: nft.address,
    nftIndex: nft.index,
    nftName: nft.metadata?.name,
    collectionAddress: nft.collection?.address,
    collectionName: nft.collection?.name,
    sessionIdPreview: sessionId.slice(0, 20) + '...',
    musicServerUrl,
    requestBody: {
      metadata: !!nft.metadata,
      metadataKeys: nft.metadata ? Object.keys(nft.metadata) : [],
      index: nft.index,
      address: nft.address
    }
  });
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
 */
export function createDetailedErrorMessage(error: any, context: string): SessionError {
  let errorCode = 'UNKNOWN_ERROR';
  let errorMessage = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
  let errorDetails = '';

  if (error instanceof Error) {
    errorMessage = error.message;
    errorDetails = error.stack || '';

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
    if (error.message.includes('User rejected')) {
      errorCode = 'USER_REJECTED';
      errorMessage = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª –ø–æ–¥–ø–∏—Å—å';
    } else if (error.message.includes('–ü–æ–¥–ø–∏—Å—å —É—Å—Ç–∞—Ä–µ–ª–∞')) {
      errorCode = 'SIGNATURE_EXPIRED';
      errorMessage = '–ü–æ–¥–ø–∏—Å—å —É—Å—Ç–∞—Ä–µ–ª–∞';
    } else if (error.message.includes('–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å')) {
      errorCode = 'INVALID_SIGNATURE';
      errorMessage = '–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å';
    } else if (error.message.includes('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞')) {
      errorCode = 'SESSION_EXPIRED';
      errorMessage = '–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞';
    } else if (error.message.includes('401')) {
      errorCode = 'UNAUTHORIZED';
      errorMessage = '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏';
    } else if (error.message.includes('403')) {
      errorCode = 'FORBIDDEN';
      errorMessage = '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω';
    } else if (error.message.includes('429')) {
      errorCode = 'RATE_LIMITED';
      errorMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤';
    } else if (error.message.includes('503')) {
      errorCode = 'SERVICE_UNAVAILABLE';
      errorMessage = '–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
    }
  }

  return {
    code: errorCode,
    message: errorMessage,
    details: `${context}: ${errorDetails}`
  };
}

/**
 * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
 */
export function validateSessionData(signData: any): { isValid: boolean; errors: string[] } {
  const errors: string[] = [];

  if (!signData) {
    errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∏');
    return { isValid: false, errors };
  }

  if (!signData.signature) {
    errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–ø–∏—Å—å');
  } else if (typeof signData.signature !== 'string') {
    errors.push('–ü–æ–¥–ø–∏—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π');
  } else if (signData.signature.length === 0) {
    errors.push('–ü—É—Å—Ç–∞—è –ø–æ–¥–ø–∏—Å—å');
  }

  if (!signData.address) {
    errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞–¥—Ä–µ—Å');
  } else if (typeof signData.address !== 'string') {
    errors.push('–ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π');
  }

  if (!signData.timestamp) {
    errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞');
  } else if (typeof signData.timestamp !== 'number') {
    errors.push('–í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º');
  } else if (signData.timestamp <= 0) {
    errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞');
  }

  if (!signData.domain) {
    errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–æ–º–µ–Ω');
  } else if (typeof signData.domain !== 'string') {
    errors.push('–î–æ–º–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π');
  }

  if (!signData.payload) {
    errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç payload');
  } else {
    if (signData.payload.type !== 'text') {
      errors.push('–¢–∏–ø payload –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "text"');
    }
    if (!signData.payload.text) {
      errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ payload');
    }
  }

  return { isValid: errors.length === 0, errors };
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤—Ä–µ–º–µ–Ω–∏
 */
export function validateTimestamp(timestamp: number, maxAgeMinutes: number = 5): { isValid: boolean; message?: string } {
  const now = Math.floor(Date.now() / 1000);
  const age = now - timestamp;

  if (age < 0) {
    return { isValid: false, message: '–í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ –∏–∑ –±—É–¥—É—â–µ–≥–æ' };
  }

  if (age > maxAgeMinutes * 60) {
    return { isValid: false, message: `–í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞ (–≤–æ–∑—Ä–∞—Å—Ç: ${Math.floor(age / 60)} –º–∏–Ω—É—Ç)` };
  }

  return { isValid: true };
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –¥–ª—è –ª–æ–≥–æ–≤
 */
export function formatTimestamp(timestamp: number): string {
  return new Date(timestamp * 1000).toISOString();
}

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–∞—Ä—Å–∏—Ç JSON –æ—Ç–≤–µ—Ç
 */
export function safeParseJson(text: string): { success: boolean; data?: any; error?: string } {
  try {
    const data = JSON.parse(text);
    return { success: true, data };
  } catch (error) {
    return { 
      success: false, 
      error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON' 
    };
  }
}