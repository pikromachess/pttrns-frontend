import { useRef, useCallback } from 'react';
import type { NFT } from '../types/nft';
import type { ListenTracker } from '../types/musicApi';

interface UseListenTrackerOptions {
  minListenTime?: number; // –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  minListenPercentage?: number; // –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
  cooldownTime?: number; // –≤—Ä–µ–º—è –º–µ–∂–¥—É –∑–∞–ø–∏—Å—è–º–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
}

const DEFAULT_OPTIONS: Required<UseListenTrackerOptions> = {
  minListenTime: 30, // 30 —Å–µ–∫—É–Ω–¥
  minListenPercentage: 0.8, // 80% —Ç—Ä–µ–∫–∞
  cooldownTime: 30000 // 30 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∑–∞–ø–∏—Å—è–º–∏
};

export function useListenTracker(options: UseListenTrackerOptions = {}): ListenTracker {
  const config = { ...DEFAULT_OPTIONS, ...options };
  
  // Map –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
  const lastRecordedRef = useRef<Map<string, number>>(new Map());
  
  // Set –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤ NFT, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
  const recordedInSessionRef = useRef<Set<string>>(new Set());

  const getNftKey = useCallback((nft: NFT): string => {
    return nft.address || `index-${nft.index || 0}`;
  }, []);

  const canRecord = useCallback((nft: NFT): boolean => {
    if (!nft.address || !nft.collection?.address) {
      console.warn('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è:', {
        hasAddress: !!nft.address,
        hasCollectionAddress: !!nft.collection?.address
      });
      return false;
    }

    const key = getNftKey(nft);
    const now = Date.now();
    const lastRecorded = lastRecordedRef.current.get(key);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown –ø–µ—Ä–∏–æ–¥
    if (lastRecorded && (now - lastRecorded) < config.cooldownTime) {
      console.log('‚è∞ –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω–æ –Ω–µ–¥–∞–≤–Ω–æ –¥–ª—è NFT:', nft.metadata?.name);
      return false;
    }
    
    return true;
  }, [config.cooldownTime, getNftKey]);

  const markAsRecorded = useCallback((nft: NFT): void => {
    const key = getNftKey(nft);
    const now = Date.now();
    
    lastRecordedRef.current.set(key, now);
    recordedInSessionRef.current.add(key);
    
    console.log('‚úÖ –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –∑–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –¥–ª—è NFT:', nft.metadata?.name);
  }, [getNftKey]);

  const shouldRecord = useCallback((nft: NFT, currentTime: number, duration: number): boolean => {
    // –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    if (!canRecord(nft)) {
      return false;
    }

    const key = getNftKey(nft);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–ª–∏ –ª–∏ —É–∂–µ –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
    if (recordedInSessionRef.current.has(key)) {
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç—É –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
    const listenThreshold = Math.min(config.minListenTime, duration * config.minListenPercentage);
    
    const shouldRecordByTime = currentTime >= listenThreshold;
    
    if (shouldRecordByTime) {
      console.log('‚è∞ –£—Å–ª–æ–≤–∏–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:', {
        currentTime,
        duration,
        threshold: listenThreshold,
        trackName: nft.metadata?.name,
        nftAddress: nft.address,
        collectionAddress: nft.collection?.address
      });
      return true;
    }
    
    return false;
  }, [canRecord, getNftKey, config.minListenTime, config.minListenPercentage]);

  const clear = useCallback((): void => {
    lastRecordedRef.current.clear();
    recordedInSessionRef.current.clear();
    console.log('üßπ –¢—Ä–µ–∫–µ—Ä –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π –æ—á–∏—â–µ–Ω');
  }, []);

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ –∑–∞–ø–∏—Å–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ NFT (–ø–æ–ª–µ–∑–Ω–æ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö)
  const resetNft = useCallback((nft: NFT): void => {
    const key = getNftKey(nft);
    lastRecordedRef.current.delete(key);
    recordedInSessionRef.current.delete(key);
    console.log('üîÑ –°–±—Ä–æ—à–µ–Ω–∞ –∑–∞–ø–∏—Å—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –¥–ª—è NFT:', nft.metadata?.name);
  }, [getNftKey]);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—Ä–µ–∫–µ—Ä–∞
  const getStats = useCallback(() => {
    return {
      totalTracked: lastRecordedRef.current.size,
      recordedInSession: recordedInSessionRef.current.size,
      config
    };
  }, [config]);

  return {
    canRecord,
    markAsRecorded,
    shouldRecord,
    clear,
    resetNft,
    getStats
  };
}