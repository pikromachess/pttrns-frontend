import { useRef, useCallback } from 'react';
import type { NFT } from '../types/nft';
import type { CacheEntry, CacheOptions, MusicCache } from '../types/cache';
import { 
  generateNftCacheKey, 
  isCacheExpired, 
  revokeBlobUrl, 
  sortCacheEntriesByAge,
  isValidNftForCache 
} from '../utils/cacheUtils';

const DEFAULT_OPTIONS: Required<CacheOptions> = {
  maxSize: 50, // –º–∞–∫—Å–∏–º—É–º 50 —Ç—Ä–µ–∫–æ–≤ –≤ –∫–µ—à–µ
  maxAge: 30 * 60 * 1000 // 30 –º–∏–Ω—É—Ç
};

export function useMusicCache(options: CacheOptions = {}): MusicCache {
  const config = { ...DEFAULT_OPTIONS, ...options };
  const cacheRef = useRef<Map<string, CacheEntry>>(new Map());

  // –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π
  const cleanup = useCallback(() => {
    const cache = cacheRef.current;    
    const toDelete: string[] = [];

    cache.forEach((entry, key) => {
      if (isCacheExpired(entry.timestamp, config.maxAge)) {
        toDelete.push(key);
        revokeBlobUrl(entry.url);
      }
    });

    toDelete.forEach(key => cache.delete(key));
    
    console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${toDelete.length} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫–µ—à–∞`);
  }, [config.maxAge]);

  // –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –º–µ—Å—Ç–∞ –≤ –∫–µ—à–µ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
  const evictOldEntries = useCallback(() => {
    const cache = cacheRef.current;
    
    if (cache.size <= config.maxSize) return;

    const entries = Array.from(cache.entries());
    const sortedEntries = sortCacheEntriesByAge(entries);
    
    // –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
    const toEvict = sortedEntries.slice(0, cache.size - config.maxSize + 1);
    
    toEvict.forEach(([key, entry]) => {
      cache.delete(key);
      revokeBlobUrl(entry.url);
    });

    console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ ${toEvict.length} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫–µ—à–∞`);
  }, [config.maxSize]);

  const get = useCallback((nft: NFT): string | null => {
    if (!isValidNftForCache(nft)) {
      console.warn('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π NFT –¥–ª—è –∫–µ—à–∞:', nft);
      return null;
    }

    const key = generateNftCacheKey(nft);
    const entry = cacheRef.current.get(key);
    
    if (!entry) return null;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ –∑–∞–ø–∏—Å—å
    if (isCacheExpired(entry.timestamp, config.maxAge)) {
      cacheRef.current.delete(key);
      revokeBlobUrl(entry.url);
      console.log('‚è∞ –ó–∞–ø–∏—Å—å –∫–µ—à–∞ –∏—Å—Ç–µ–∫–ª–∞:', key);
      return null;
    }
    
    console.log('üíæ –ù–∞–π–¥–µ–Ω —Ç—Ä–µ–∫ –≤ –∫–µ—à–µ:', nft.metadata?.name);
    return entry.url;
  }, [config.maxAge]);

  const set = useCallback((nft: NFT, url: string): void => {
    if (!isValidNftForCache(nft)) {
      console.warn('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π NFT –¥–ª—è –∫–µ—à–∞:', nft);
      return;
    }

    if (!url) {
      console.warn('‚ö†Ô∏è –ü—É—Å—Ç–æ–π URL –¥–ª—è –∫–µ—à–∞');
      return;
    }

    const key = generateNftCacheKey(nft);
    
    // –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å—Ç–∞—Ä—ã–π URL
    const existingEntry = cacheRef.current.get(key);
    if (existingEntry) {
      revokeBlobUrl(existingEntry.url);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    cacheRef.current.set(key, {
      url,
      timestamp: Date.now(),
      nftKey: key
    });

    console.log('üíæ –¢—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–µ—à:', nft.metadata?.name);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –∏ –æ—á–∏—â–∞–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    evictOldEntries();
  }, [evictOldEntries]);

  const has = useCallback((nft: NFT): boolean => {
    if (!isValidNftForCache(nft)) return false;
    
    const key = generateNftCacheKey(nft);
    const entry = cacheRef.current.get(key);
    
    if (!entry) return false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å
    if (isCacheExpired(entry.timestamp, config.maxAge)) {
      cacheRef.current.delete(key);
      revokeBlobUrl(entry.url);
      return false;
    }
    
    return true;
  }, [config.maxAge]);

  const deleteEntry = useCallback((nft: NFT): boolean => {
    if (!isValidNftForCache(nft)) return false;
    
    const key = generateNftCacheKey(nft);
    const entry = cacheRef.current.get(key);
    
    if (entry) {
      revokeBlobUrl(entry.url);
      cacheRef.current.delete(key);
      console.log('üóëÔ∏è –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∫–µ—à–∞:', key);
      return true;
    }
    
    return false;
  }, []);

  const clear = useCallback((): void => {
    const cache = cacheRef.current;
    
    // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –≤—Å–µ blob URLs
    cache.forEach(entry => {
      revokeBlobUrl(entry.url);
    });
    
    cache.clear();
    console.log('üßπ –ö–µ—à –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω');
  }, []);

  const size = useCallback((): number => {
    return cacheRef.current.size;
  }, []); 

  return {
    get,
    set,
    has,
    delete: deleteEntry,
    clear,
    size,
    cleanup
  };
}