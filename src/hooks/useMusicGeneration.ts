// –í src/hooks/useMusicGeneration.ts

import { useState, useCallback } from 'react';
import { CHAIN, useTonConnectUI } from '@tonconnect/ui-react';
import { usePlayer } from '../contexts/PlayerContext';
import type { NFT } from '../types/nft';
import { baseUrl } from '../backend-api';
import { 
  logSessionRequest, 
  logBackendResponse, 
  logMusicRequest,
  createDetailedErrorMessage,
  validateSessionData,
  validateTimestamp,
  safeParseJson
} from '../utils/debugUtils';

// –ö–µ—à –¥–ª—è —Å–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
let sessionCache: {
  sessionId: string;
  expiresAt: Date;
  musicServerUrl: string;
} | null = null;

export function useMusicGeneration() {
  const { playNft } = usePlayer();  
  const [tonConnectUI] = useTonConnectUI();
  const [generatingMusic, setGeneratingMusic] = useState<string | null>(null);
  const [isCreatingSession, setIsCreatingSession] = useState(false);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–∞ –∫–µ—à–∞ NFT
  const getNftCacheKey = useCallback((nft: NFT): string => {
    return nft.address || `index-${nft.index}`;
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
  const createListeningSession = useCallback(async (): Promise<{sessionId: string, musicServerUrl: string} | null> => {
    try {
      console.log('üîê –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à —Å–µ—Å—Å–∏–∏
      if (sessionCache && new Date() < sessionCache.expiresAt) {
        console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–µ—Å—Å–∏—é');
        return {
          sessionId: sessionCache.sessionId,
          musicServerUrl: sessionCache.musicServerUrl
        };
      }

      setIsCreatingSession(true);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
      if (window.Telegram?.WebApp?.HapticFeedback) {
        window.Telegram.WebApp.HapticFeedback.notificationOccurred('warning');
      }

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
      const textData = {
        network: CHAIN.TESTNET, // –∏–ª–∏ CHAIN.MAINNET –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–µ–π —Å–µ—Ç–∏
        type: 'text' as const,
        text: "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–∞—á–∞–ª–æ —Å–µ—Å—Å–∏–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è. –ü–æ–¥–ø–∏—Å—ã–≤–∞—è —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ —á–µ—Å—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è NFT-–∞—É–¥–∏–æ –≤ —Ä–∞–º–∫–∞—Ö –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã. \n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å—å –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç—Å—è –≤ –±–ª–æ–∫—á–µ–π–Ω–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ª–µ–≥–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. \n–°–µ—Å—Å–∏—è –¥–ª–∏—Ç—Å—è 1 —á–∞—Å.\n\nPatternsNft"
      };

      console.log('üìù –ó–∞–ø—Ä–æ—Å –ø–æ–¥–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è...');
      
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const signResult = await tonConnectUI.signData(textData);

      if (!signResult) {
        console.warn('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª –ø–æ–¥–ø–∏—Å—å');
        return null;
      }

      console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∞–Ω–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ...');

      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const validation = validateSessionData(signResult);
      if (!validation.isValid) {
        throw new Error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∏: ${validation.errors.join(', ')}`);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
      const timestampValidation = validateTimestamp(signResult.timestamp);
      if (!timestampValidation.isValid) {
        throw new Error(timestampValidation.message || '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞');
      }

      // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞
      logSessionRequest(signResult);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –±—ç–∫–µ–Ω–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ SignDataResponse
      const requestBody = {
        signature: signResult.signature,
        address: signResult.address,
        timestamp: signResult.timestamp,
        domain: signResult.domain,
        payload: signResult.payload,
        // –£–±–∏—Ä–∞–µ–º –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º API
        // public_key –∏ walletStateInit –±—É–¥—É—Ç –ø–æ–ª—É—á–µ–Ω—ã –Ω–∞ –±—ç–∫–µ–Ω–¥–µ –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º
      };

      console.log('üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏:', {
        address: requestBody.address,
        domain: requestBody.domain,
        timestamp: requestBody.timestamp,
        hasSignature: !!requestBody.signature,
        payloadType: requestBody.payload.type
      });

      const response = await fetch(`${baseUrl}/api/session/create`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(requestBody)
      });

      const responseText = await response.text();
      logBackendResponse(response, responseText);

      if (!response.ok) {
        const parseResult = safeParseJson(responseText);
        const errorMessage = parseResult.success 
          ? parseResult.data?.error || `–û—à–∏–±–∫–∞ HTTP ${response.status}`
          : `–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status} - ${responseText}`;
        
        throw new Error(errorMessage);
      }

      const parseResult = safeParseJson(responseText);
      if (!parseResult.success) {
        throw new Error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: ${parseResult.error}`);
      }

      const sessionData = parseResult.data;
      
      console.log('‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ:', {
        sessionId: sessionData.sessionId.slice(0, 20) + '...',
        musicServerUrl: sessionData.musicServerUrl,
        expiresAt: sessionData.expiresAt
      });
      
      // –ö–µ—à–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
      sessionCache = {
        sessionId: sessionData.sessionId,
        expiresAt: new Date(sessionData.expiresAt),
        musicServerUrl: sessionData.musicServerUrl
      };
      
      if (window.Telegram?.WebApp?.HapticFeedback) {
        window.Telegram.WebApp.HapticFeedback.notificationOccurred('success');
      }

      return {
        sessionId: sessionData.sessionId,
        musicServerUrl: sessionData.musicServerUrl
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
      
      const detailedError = createDetailedErrorMessage(error, 'createListeningSession');
      console.error('üìã –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', detailedError);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ—Ç–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –ø–æ–¥–ø–∏—Å–∏
      if (detailedError.code !== 'USER_REJECTED') {
        alert(detailedError.message);
      }
      
      if (window.Telegram?.WebApp?.HapticFeedback) {
        window.Telegram.WebApp.HapticFeedback.notificationOccurred('error');
      }
      
      return null;
    } finally {
      setIsCreatingSession(false);
    }
  }, [tonConnectUI]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏ —Å —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
  const generateMusicWithSession = useCallback(async (nft: NFT, sessionId: string, musicServerUrl: string): Promise<string> => {
    // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞
    logMusicRequest(nft, sessionId, musicServerUrl);
    
    const response = await fetch(`${musicServerUrl}/generate-music-stream`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${sessionId}`,
      },
      body: JSON.stringify({
        metadata: nft.metadata,
        index: nft.index,
        address: nft.address
      })
    });

    const responseText = await response.text();
    
    console.log('üì° –û—Ç–≤–µ—Ç –æ—Ç –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞:', {
      status: response.status,
      statusText: response.statusText,
      ok: response.ok,
      contentType: response.headers.get('content-type'),
      contentLength: response.headers.get('content-length'),
      responseLength: responseText.length,
      isAudio: response.headers.get('content-type')?.includes('audio') || false
    });

    if (!response.ok) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞:', responseText);
      
      if (response.status === 401) {
        // –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –æ—á–∏—â–∞–µ–º –∫–µ—à
        sessionCache = null;
        throw new Error('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞');
      } else if (response.status === 403) {
        throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏');
      } else if (response.status === 429) {
        throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤');
      } else if (response.status === 503) {
        throw new Error('–°–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      }
      
      throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status} - ${responseText}`);
    }

    // –î–ª—è –∞—É–¥–∏–æ –æ—Ç–≤–µ—Ç–∞ —á–∏—Ç–∞–µ–º –∫–∞–∫ blob
    const audioBlob = new Blob([responseText], { type: response.headers.get('content-type') || 'audio/wav' });
    console.log('‚úÖ –ú—É–∑—ã–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ, —Ä–∞–∑–º–µ—Ä:', audioBlob.size);
    return URL.createObjectURL(audioBlob);
  }, []);

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏
  const generateMusicForNft = useCallback(async (selectedNft: NFT, allNfts: NFT[]) => {
    const nftId = selectedNft.address || `${selectedNft.index}`;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –ª–∏ —É–∂–µ –º—É–∑—ã–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ NFT
    if (generatingMusic === nftId || isCreatingSession) {
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ NFT –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –º—É—Ç–∞—Ü–∏–π
    let nftToPlay = { ...selectedNft };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    if (!nftToPlay.collection?.address) {
      console.warn('‚ö†Ô∏è –£ NFT –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:', nftToPlay);
      // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–æ–ª–ª–µ–∫—Ü–∏—é –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ
      const nftWithCollection = allNfts.find(n => 
        n.address === nftToPlay.address && n.collection?.address
      );
      if (nftWithCollection) {
        nftToPlay = { ...nftToPlay, collection: nftWithCollection.collection };
      } else {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è NFT');
        alert('–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ NFT');
        return;
      }
    }
    
    try {
      setGeneratingMusic(nftId);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      if (window.Telegram && window.Telegram.WebApp) {
        window.Telegram.WebApp.HapticFeedback.impactOccurred('medium');
      }
      
      // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
      const sessionData = await createListeningSession();
      if (!sessionData) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª –ø–æ–¥–ø–∏—Å—å –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
        return;
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º—É–∑—ã–∫—É —Å —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
      const audioUrl = await generateMusicWithSession(nftToPlay, sessionData.sessionId, sessionData.musicServerUrl);
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ NFT –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      const enrichedNft = {
        ...nftToPlay,
        audioUrl,
        sessionId: sessionData.sessionId,
        musicServerUrl: sessionData.musicServerUrl
      };
      
      // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Å–µ NFT –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
      const enrichedPlaylist = allNfts.map(playlistNft => {
        // –ï—Å–ª–∏ —É NFT –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ –Ω–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏–∏, –Ω–æ –º—ã –∑–Ω–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if (!playlistNft.collection?.address && nftToPlay.collection?.address) {
          return {
            ...playlistNft,
            collection: nftToPlay.collection,
            sessionId: sessionData.sessionId,
            musicServerUrl: sessionData.musicServerUrl
          };
        }
        return {
          ...playlistNft,
          sessionId: sessionData.sessionId,
          musicServerUrl: sessionData.musicServerUrl
        };
      });
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–ª–µ–π–ª–∏—Å—Ç: –Ω–∞—á–∏–Ω–∞—è —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞
      const selectedIndex = enrichedPlaylist.findIndex(item => 
        item.address === nftToPlay.address || 
        (item.index === nftToPlay.index && !item.address && !nftToPlay.address)
      );
      
      let orderedPlaylist: NFT[];
      if (selectedIndex !== -1) {
        // –°–æ–∑–¥–∞–µ–º –ø–ª–µ–π–ª–∏—Å—Ç –Ω–∞—á–∏–Ω–∞—è —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞
        orderedPlaylist = [
          ...enrichedPlaylist.slice(selectedIndex), // –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–æ –∫–æ–Ω—Ü–∞
          ...enrichedPlaylist.slice(0, selectedIndex) // –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ
        ];
      } else {
        // –ï—Å–ª–∏ —Ç—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å—å —Å–ø–∏—Å–æ–∫
        orderedPlaylist = enrichedPlaylist;
      }
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–ª–µ–π–ª–∏—Å—Ç–æ–º
      await playNft(enrichedNft, orderedPlaylist);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏:', error);
      
      if (error instanceof Error) {
        if (error.message.includes('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞')) {
          // –û—á–∏—â–∞–µ–º –∫–µ—à –∏ –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
          sessionCache = null;
          alert('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        } else {
          alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏: ${error.message}`);
        }
      } else {
        alert('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏');
      }
    } finally {
      setGeneratingMusic(null);
    }
  }, [createListeningSession, generateMusicWithSession, playNft, generatingMusic, isCreatingSession, getNftCacheKey]);

  const handleNftClick = useCallback((nft: NFT, allNfts: NFT[]) => {
    generateMusicForNft(nft, allNfts);
  }, [generateMusicForNft]);

  return {
    generatingMusic: generatingMusic || (isCreatingSession ? 'session-creation' : null),
    generateMusicForNft,
    handleNftClick,
    isCreatingSession,
  };
}