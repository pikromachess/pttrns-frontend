import { useState, useCallback } from 'react';
import { CHAIN, useTonConnectUI } from '@tonconnect/ui-react';
import { usePlayer } from '../contexts/PlayerContext';
import { useSession } from '../contexts/SessionContext';
import { useToast } from '../components/Toast/Toast';
import type { NFT } from '../types/nft';
import { baseUrl } from '../backend-api';
import { 
  logSessionRequest, 
  logBackendResponse,   
  createDetailedErrorMessage,
  validateSessionData,
  validateTimestamp,
  safeParseJson
} from '../utils/debugUtils';

// –£–±–∏—Ä–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç

export function useMusicGeneration() {
  const { playNft } = usePlayer();  
  const [tonConnectUI] = useTonConnectUI();
  const { showToast } = useToast();
  const { 
    hasActiveSession, 
    sessionId, 
    musicServerUrl, 
    setSessionData, 
    clearSession,
    checkSessionValidity 
  } = useSession();
  const [generatingMusic, setGeneratingMusic] = useState<string | null>(null);
  const [isCreatingSession, setIsCreatingSession] = useState(false);
  const [showSessionWarning, setShowSessionWarning] = useState(false);
  const [pendingNft, setPendingNft] = useState<{nft: NFT, allNfts: NFT[]} | null>(null);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–∞ –∫–µ—à–∞ NFT
  const getNftCacheKey = useCallback((nft: NFT): string => {
    return nft.address || `index-${nft.index}`;
  }, []);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
  const hasValidSession = useCallback((): boolean => {
    return checkSessionValidity();
  }, [checkSessionValidity]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
  const createListeningSession = useCallback(async (): Promise<{sessionId: string, musicServerUrl: string} | null> => {
    try {
      console.log('üîê –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à —Å–µ—Å—Å–∏–∏ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç
      if (hasActiveSession && sessionId && musicServerUrl) {
        console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞');
        return {
          sessionId,
          musicServerUrl
        };
      }

      setIsCreatingSession(true);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
      if (window.Telegram?.WebApp?.HapticFeedback) {
        window.Telegram.WebApp.HapticFeedback.notificationOccurred('warning');
      }

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
      const textData = {
        network: CHAIN.TESTNET, // –∏–ª–∏ CHAIN.MAINNET –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–µ–π —Å–µ—Ç–∏
        type: 'text' as const,
        text: "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–∞—á–∞–ª–æ —Å–µ—Å—Å–∏–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è. –ü–æ–¥–ø–∏—Å—ã–≤–∞—è —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ —á–µ—Å—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è NFT-–∞—É–¥–∏–æ –≤ —Ä–∞–º–∫–∞—Ö –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã. \n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å—å –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç—Å—è –≤ –±–ª–æ–∫—á–µ–π–Ω–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ª–µ–≥–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. \n–°–µ—Å—Å–∏—è –¥–ª–∏—Ç—Å—è 1 —á–∞—Å.\n\nPatternsNft"
      };

      console.log('üìù –ó–∞–ø—Ä–æ—Å –ø–æ–¥–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è...');
      
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const signResult = await tonConnectUI.signData(textData);

      if (!signResult) {
        console.warn('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª –ø–æ–¥–ø–∏—Å—å');
        return null;
      }

      console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∞–Ω–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ...');

      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const validation = validateSessionData(signResult);
      if (!validation.isValid) {
        throw new Error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∏: ${validation.errors.join(', ')}`);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
      const timestampValidation = validateTimestamp(signResult.timestamp);
      if (!timestampValidation.isValid) {
        throw new Error(timestampValidation.message || '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞');
      }

      // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞
      logSessionRequest(signResult);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –±—ç–∫–µ–Ω–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
      const requestBody = {
        signature: signResult.signature,
        address: signResult.address,
        timestamp: signResult.timestamp,
        domain: signResult.domain,
        payload: signResult.payload,
      };

      console.log('üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏:', {
        address: requestBody.address,
        domain: requestBody.domain,
        timestamp: requestBody.timestamp,
        hasSignature: !!requestBody.signature,
        payloadType: requestBody.payload.type
      });

      const response = await fetch(`${baseUrl}/api/session/create`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(requestBody)
      });

      const responseText = await response.text();
      logBackendResponse(response, responseText);

      if (!response.ok) {
        const parseResult = safeParseJson(responseText);
        const errorMessage = parseResult.success 
          ? parseResult.data?.error || `–û—à–∏–±–∫–∞ HTTP ${response.status}`
          : `–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status} - ${responseText}`;
        
        throw new Error(errorMessage);
      }

      const parseResult = safeParseJson(responseText);
      if (!parseResult.success) {
        throw new Error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: ${parseResult.error}`);
      }

      const sessionDataResponse = parseResult.data;
      
      console.log('‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ:', {
        sessionId: sessionDataResponse.sessionId.slice(0, 20) + '...',
        musicServerUrl: sessionDataResponse.musicServerUrl,
        expiresAt: sessionDataResponse.expiresAt
      });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
      setSessionData(
        sessionDataResponse.sessionId,
        sessionDataResponse.musicServerUrl,
        new Date(sessionDataResponse.expiresAt)
      );
      
      if (window.Telegram?.WebApp?.HapticFeedback) {
        window.Telegram.WebApp.HapticFeedback.notificationOccurred('success');
      }

      return {
        sessionId: sessionDataResponse.sessionId,
        musicServerUrl: sessionDataResponse.musicServerUrl
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
      
      const detailedError = createDetailedErrorMessage(error, 'createListeningSession');
      console.error('üìã –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', detailedError);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ—Ç–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –ø–æ–¥–ø–∏—Å–∏
      if (detailedError.code !== 'USER_REJECTED') {
        alert(detailedError.message);
      }
      
      if (window.Telegram?.WebApp?.HapticFeedback) {
        window.Telegram.WebApp.HapticFeedback.notificationOccurred('error');
      }
      
      return null;
    } finally {
      setIsCreatingSession(false);
    }
  }, [tonConnectUI, hasActiveSession, sessionId, musicServerUrl, setSessionData]);

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏
  const generateMusicForNft = useCallback(async (selectedNft: NFT, allNfts: NFT[]) => {
    const nftId = selectedNft.address || `${selectedNft.index}`;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –ª–∏ —É–∂–µ –º—É–∑—ã–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ NFT
    if (generatingMusic === nftId || isCreatingSession) {
      console.log('üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ:', { generatingMusic, isCreatingSession });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
    if (!hasValidSession()) {
      console.log('üîê –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ');
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
      setPendingNft({ nft: selectedNft, allNfts });
      setShowSessionWarning(true);
      
      if (window.Telegram?.WebApp?.HapticFeedback) {
        window.Telegram.WebApp.HapticFeedback.impactOccurred('medium');
      }
      
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ NFT –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –º—É—Ç–∞—Ü–∏–π
    let nftToPlay = { ...selectedNft };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    if (!nftToPlay.collection?.address) {
      console.warn('‚ö†Ô∏è –£ NFT –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:', nftToPlay);
      // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–æ–ª–ª–µ–∫—Ü–∏—é –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ
      const nftWithCollection = allNfts.find(n => 
        n.address === nftToPlay.address && n.collection?.address
      );
      if (nftWithCollection) {
        nftToPlay = { ...nftToPlay, collection: nftWithCollection.collection };
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ:', nftWithCollection.collection);
      } else {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è NFT');
        alert('–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ NFT');
        return;
      }
    }
    
    try {
      setGeneratingMusic(nftId);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      if (window.Telegram && window.Telegram.WebApp) {
        window.Telegram.WebApp.HapticFeedback.impactOccurred('medium');
      }
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      if (!sessionId || !musicServerUrl) {
        throw new Error('–°–µ—Å—Å–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
      }

      const sessionDataToUse = {
        sessionId,
        musicServerUrl
      };

      console.log('üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', {
        sessionId: sessionDataToUse.sessionId.slice(0, 20) + '...',
        musicServerUrl: sessionDataToUse.musicServerUrl,
        nftToPlay: nftToPlay.metadata?.name,
        playlistLength: allNfts.length
      });

      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–µ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞
      const enrichedPlaylist = allNfts.map(playlistNft => {
        const enrichedNft = {
          ...playlistNft,
          sessionId: sessionDataToUse.sessionId,
          musicServerUrl: sessionDataToUse.musicServerUrl,
          collection: playlistNft.collection?.address 
            ? playlistNft.collection 
            : (nftToPlay.collection?.address ? nftToPlay.collection : playlistNft.collection)
        };
        
        console.log('üîß –û–±–æ–≥–∞—â–∞–µ–º NFT –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ:', {
          name: enrichedNft.metadata?.name,
          hasSessionId: !!enrichedNft.sessionId,
          hasMusicServerUrl: !!enrichedNft.musicServerUrl,
          hasCollection: !!enrichedNft.collection?.address,
          collectionName: enrichedNft.collection?.name
        });
        
        return enrichedNft;
      });
      
      // –û–±–æ–≥–∞—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π NFT
      const enrichedNft = {
        ...nftToPlay,
        sessionId: sessionDataToUse.sessionId,
        musicServerUrl: sessionDataToUse.musicServerUrl
      };
      
      console.log('üéµ –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Å –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã–º –ø–ª–µ–π–ª–∏—Å—Ç–æ–º:', {
        selectedNft: enrichedNft.metadata?.name,
        sessionId: sessionDataToUse.sessionId.slice(0, 20) + '...',
        playlistLength: enrichedPlaylist.length,
        playlistWithSession: enrichedPlaylist.filter(nft => nft.sessionId && nft.musicServerUrl).length,
        allHaveCollection: enrichedPlaylist.every(nft => nft.collection?.address)
      });
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–ª–µ–π–ª–∏—Å—Ç–æ–º
      await playNft(enrichedNft, enrichedPlaylist);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏:', error);
      
      if (error instanceof Error) {
        if (error.message.includes('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞')) {
          // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Å–Ω–æ–≤–∞
          clearSession();
          setPendingNft({ nft: selectedNft, allNfts });
          setShowSessionWarning(true);
          showToast('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é.', 'error');
        } else if (error.message.includes('401') || error.message.includes('Authentication required')) {
          // –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
          clearSession();
          showToast('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ —Å–µ—Å—Å–∏—é –∑–∞–Ω–æ–≤–æ.', 'error');
        } else if (error.message.includes('503') || error.message.includes('–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')) {
          showToast('–°–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', 'error');
        } else {
          showToast(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏: ${error.message}`, 'error');
        }
      } else {
        showToast('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏', 'error');
      }
    } finally {
      setGeneratingMusic(null);
    }
  }, [playNft, generatingMusic, isCreatingSession, getNftCacheKey, hasValidSession, sessionId, musicServerUrl, clearSession, showToast]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
  const handleSessionWarningConfirm = useCallback(async () => {
    setShowSessionWarning(false);
    
    if (!pendingNft) return;
    
    try {
      // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
      const sessionData = await createListeningSession();
      
      if (sessionData) {
        console.log('‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ...');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        showToast('–°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞! –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ...', 'success', 3000);
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
        setTimeout(async () => {
          if (pendingNft) {
            await generateMusicForNft(pendingNft.nft, pendingNft.allNfts);
          }
        }, 500); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ toast
        
        if (window.Telegram?.WebApp?.HapticFeedback) {
          window.Telegram.WebApp.HapticFeedback.notificationOccurred('success');
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏:', error);
      showToast('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', 'error');
    } finally {
      setPendingNft(null);
    }
  }, [pendingNft, createListeningSession, generateMusicForNft, showToast]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
  const handleSessionWarningCancel = useCallback(() => {
    setShowSessionWarning(false);
    setPendingNft(null);
    
    if (window.Telegram?.WebApp?.HapticFeedback) {
      window.Telegram.WebApp.HapticFeedback.impactOccurred('light');
    }
  }, []);

  

  const handleNftClick = useCallback((nft: NFT, allNfts: NFT[]) => {
    generateMusicForNft(nft, allNfts);
  }, [generateMusicForNft]);

  return {
    generatingMusic: generatingMusic || (isCreatingSession ? 'session-creation' : null),
    generateMusicForNft,
    handleNftClick,
    isCreatingSession,
    showSessionWarning,
    handleSessionWarningConfirm,
    handleSessionWarningCancel,
    hasActiveSession,
    showToast, // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
  };
}