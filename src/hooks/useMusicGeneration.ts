import { useState, useCallback, useContext } from 'react';
import { usePlayer, generateMusicWithToken } from '../contexts/PlayerContext';
import { BackendTokenContext } from '../BackendTokenContext';
import type { NFT } from '../types/nft';

export function useMusicGeneration() {
  const { playNft } = usePlayer();
  const { token } = useContext(BackendTokenContext);
  const [generatingMusic, setGeneratingMusic] = useState<string | null>(null);

  const generateMusicForNft = useCallback(async (selectedNft: NFT, allNfts: NFT[]) => {
    if (!token) {
      console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      alert('–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –º—É–∑—ã–∫–∏');
      return;
    }

    const nftId = selectedNft.address || `${selectedNft.index}`;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –ª–∏ —É–∂–µ –º—É–∑—ã–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ NFT
    if (generatingMusic === nftId) {
      console.log('‚è≥ –ú—É–∑—ã–∫–∞ —É–∂–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –¥–ª—è —ç—Ç–æ–≥–æ NFT');
      return;
    }

    console.log('üéµ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –º—É–∑—ã–∫–∏ –¥–ª—è NFT:', {
      name: selectedNft.metadata?.name,
      address: selectedNft.address,
      collectionAddress: selectedNft.collection?.address,
      playlistSize: allNfts.length
    });

    // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ NFT –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –º—É—Ç–∞—Ü–∏–π
    let nftToPlay = { ...selectedNft };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    if (!nftToPlay.collection?.address) {
      console.warn('‚ö†Ô∏è –£ NFT –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:', nftToPlay);
      // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–æ–ª–ª–µ–∫—Ü–∏—é –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ
      const nftWithCollection = allNfts.find(n => 
        n.address === nftToPlay.address && n.collection?.address
      );
      if (nftWithCollection) {
        nftToPlay = { ...nftToPlay, collection: nftWithCollection.collection };
        console.log('üîß –î–æ–ø–æ–ª–Ω–∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞:', nftToPlay.collection?.address);
      } else {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è NFT');
        alert('–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ NFT');
        return;
      }
    }

    // –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ NFT –ø–µ—Ä–µ–¥ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º
    console.log('üéØ –§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ NFT –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', {
      name: nftToPlay.metadata?.name,
      address: nftToPlay.address,
      collectionName: nftToPlay.collection?.name,
      collectionAddress: nftToPlay.collection?.address
    });
    
    try {
      setGeneratingMusic(nftId);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      if (window.Telegram && window.Telegram.WebApp) {
        window.Telegram.WebApp.HapticFeedback.impactOccurred('medium');
      }
      
      const audioUrl = await generateMusicWithToken(nftToPlay, token);
      console.log('üéº –ú—É–∑—ã–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞, –Ω–∞—á–∏–Ω–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ');
      
      // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Å–µ NFT –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
      const enrichedPlaylist = allNfts.map(playlistNft => {
        // –ï—Å–ª–∏ —É NFT –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ –Ω–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏–∏, –Ω–æ –º—ã –∑–Ω–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if (!playlistNft.collection?.address && nftToPlay.collection?.address) {
          return {
            ...playlistNft,
            collection: nftToPlay.collection
          };
        }
        return playlistNft;
      });
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–ª–µ–π–ª–∏—Å—Ç: –Ω–∞—á–∏–Ω–∞—è —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞, –∑–∞—Ç–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤ –ø–æ—Ä—è–¥–∫–µ
      const selectedIndex = enrichedPlaylist.findIndex(item => 
        item.address === nftToPlay.address || 
        (item.index === nftToPlay.index && !item.address && !nftToPlay.address)
      );
      
      let orderedPlaylist: NFT[];
      if (selectedIndex !== -1) {
        // –°–æ–∑–¥–∞–µ–º –ø–ª–µ–π–ª–∏—Å—Ç –Ω–∞—á–∏–Ω–∞—è —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞
        orderedPlaylist = [
          ...enrichedPlaylist.slice(selectedIndex), // –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–æ –∫–æ–Ω—Ü–∞
          ...enrichedPlaylist.slice(0, selectedIndex) // –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ
        ];
      } else {
        // –ï—Å–ª–∏ —Ç—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å—å —Å–ø–∏—Å–æ–∫
        orderedPlaylist = enrichedPlaylist;
      }
      
      console.log('üìã –ü–ª–µ–π–ª–∏—Å—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω:', {
        selectedTrack: nftToPlay.metadata?.name,
        selectedIndex,
        totalTracks: orderedPlaylist.length,
        firstTrack: orderedPlaylist[0]?.metadata?.name,
        allTracksHaveCollection: orderedPlaylist.every(n => n.collection?.address),
        collectionAddress: nftToPlay.collection?.address
      });
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–ª–µ–π–ª–∏—Å—Ç–æ–º
      await playNft({ ...nftToPlay, audioUrl }, orderedPlaylist);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
      setGeneratingMusic(null);
    }
  }, [token, playNft, generatingMusic]);

  const handleNftClick = useCallback((nft: NFT, allNfts: NFT[]) => {
    console.log('üéØ NFT clicked:', {
      track: nft.metadata?.name,
      hasToken: !!token,
      playlistSize: allNfts.length,
      hasCollectionInfo: !!nft.collection?.address,
      collectionAddress: nft.collection?.address
    });
    
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ NFT –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–∞
    generateMusicForNft(nft, allNfts);
  }, [generateMusicForNft]);

  return {
    generatingMusic,
    generateMusicForNft,
    handleNftClick,
  };
}