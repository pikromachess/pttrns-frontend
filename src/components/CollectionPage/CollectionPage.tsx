import { useState, useEffect } from 'react';
import { useParams, useNavigate, useLocation } from 'react-router-dom';
import { motion } from 'framer-motion';
import { ArrowLeftIcon } from '@heroicons/react/24/outline';
import { TonConnectButton } from '@tonconnect/ui-react';
import { backendApi } from '../../backend-api';
import { CollectionHeader } from './CollectionHeader';
import { NFTStatItem } from './NFTStatItem';
import { LoadingState } from './LoadingState';
import { ErrorState } from './ErrorState';
import { EmptyState } from './EmptyState';
import { NavBar } from '../NavBar/NavBar';
import '../../App.css';
import type { Collection, NFTWithListens } from '../../types/nft';

export default function CollectionPage() {
  const { address } = useParams<{ address: string }>();
  const navigate = useNavigate();
  const location = useLocation();
  const collection = location.state?.collection as Collection;
  
  const [nfts, setNfts] = useState<NFTWithListens[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π
  const formatListens = (count: number): string => {
    if (count >= 1000000) {
      return `${(count / 1000000).toFixed(1)}M`;
    } else if (count >= 1000) {
      return `${(count / 1000).toFixed(1)}K`;
    }
    return count.toString();
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∑–∞–¥
  const handleBackClick = () => {
    navigate('/');
    if (window.Telegram && window.Telegram.WebApp) {
      window.Telegram.WebApp.HapticFeedback.impactOccurred('medium');
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ NFT –∫–æ–ª–ª–µ–∫—Ü–∏–∏
  useEffect(() => {
    const fetchCollectionNfts = async () => {
      if (!address) return;
      
      try {
        setLoading(true);
        setError(null);
        
        console.log('üìä –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É NFT –¥–ª—è —Ä–∞–±–æ—Ç—ã:', address);
        
        const response = await backendApi.getCollectionNftsStats(address, 50);
        
        if (response && response.nfts) {
          console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', {
            nfts: response.nfts,
            totalListens: response.nfts.reduce((sum, nft) => sum + nft.listens, 0)
          });
          
          setNfts(response.nfts);
        } else {
          setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–ª–ª–µ–∫—Ü–∏–∏');
        }
      } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', err);
        setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
      } finally {
        setLoading(false);
      }
    };

    fetchCollectionNfts();
  }, [address]); // –£–±—Ä–∞–Ω–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å collection?.name

  return (
    <div className="app">
      {/* –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å */}
      <div className="upper-bar">
        <motion.button
          onClick={handleBackClick}
          whileTap={{ scale: 0.95 }}
          style={{
            position: 'absolute',
            left: '12px',
            top: 'calc(var(--safe-area-top) + 12px)',
            width: '40px',
            height: '40px',
            borderRadius: '50%',
            backgroundColor: '#1c1c1c',
            border: 'none',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            cursor: 'pointer',
            zIndex: 15
          }}
        >
          <ArrowLeftIcon style={{ width: '20px', height: '20px', color: '#fff' }} />
        </motion.button>

        <div className="tonConnectButton">
          <TonConnectButton style={{boxShadow: 'none'}} />
        </div>
        
        <div
          style={{
            position: 'absolute',
            left: '50%',
            top: 'calc(var(--safe-area-top) + 12px)',
            transform: 'translateX(-50%)',
            textAlign: 'center',
            color: '#fff',
            zIndex: 15,
            maxWidth: '200px'
          }}
        >
          <div style={{
            fontSize: '16px',
            fontWeight: '600',
            overflow: 'hidden',
            textOverflow: 'ellipsis',
            whiteSpace: 'nowrap'
          }}>
            –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
          </div>
        </div>
      </div>

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <div className="main-content">
        <div style={{ 
          width: '100%', 
          maxWidth: '600px', 
          padding: '0 16px',
          display: 'flex',
          flexDirection: 'column',
          gap: '16px'
        }}>
          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ */}
          {collection && (
            <CollectionHeader 
              collection={collection} 
              formatListens={formatListens} 
            />
          )}

          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ */}
          <div style={{
            padding: '0 4px',
            marginBottom: '8px'
          }}>
            <h3 style={{
              fontSize: '18px',
              fontWeight: '600',
              color: '#fff',
              margin: 0
            }}>
              –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π NFT
            </h3>
            <p style={{
              fontSize: '14px',
              color: '#999',
              margin: '4px 0 0 0'
            }}>
              –í—Å–µ NFT –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            </p>
          </div>

          {/* –°–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏, –æ—à–∏–±–∫–∏ –∏ –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ */}
          {loading && <LoadingState />}
          {error && <ErrorState error={error} />}
          {!loading && !error && nfts.length === 0 && <EmptyState />}

          {/* –°–ø–∏—Å–æ–∫ NFT —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π */}
          {!loading && !error && nfts.length > 0 && (
            <div style={{
              display: 'flex',
              flexDirection: 'column',
              gap: '8px',
              paddingBottom: '120px'
            }}>
              {nfts.map((nft, index) => (
                <NFTStatItem
                  key={nft.address}
                  nft={nft}
                  index={index}
                  formatListens={formatListens}
                />
              ))}
            </div>
          )}
        </div>
      </div>
      
      <NavBar />            

      {/* CSS –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ */}
      <style>
        {`
          @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
          }
        `}
      </style>
    </div>
  );
}